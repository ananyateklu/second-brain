---
description: General overview of the Second Brain application architecture and structure
globs: *.ts, *.tsx, *.cs, *.py, *.md
---

# Second Brain Project Overview

Second Brain is an AI-enhanced knowledge management and note-taking system that unifies notes, ideas, tasks, and reminders in one interactive environment. The application intelligently links related concepts, highlights relevant information, and provides AI guidance.

## Project Architecture

The project follows a modern architecture with separate frontend and backend components:

- **Frontend**: React 18 with TypeScript, Vite, and TailwindCSS
- **Backend**: ASP.NET Core 8.0 Web API with Entity Framework Core
- **AI Services**: Multi-provider AI integration (OpenAI, Claude, Gemini, Grok, Local)
- **Real-time Updates**: SignalR for streaming responses and updates
- **Database**: SQL Server with Entity Framework Core

## Key Features

- Notes with bi-directional linking
- Task management with dependencies
- Reminders with time-based notifications
- AI-powered assistance and content generation
- Multi-theme support (light, dark, midnight)
- Activity tracking and gamification

## Directory Structure

```
/
├── frontend/                 # React frontend application
├── backend/                  # .NET backend services
│   ├── SecondBrain.Api/      # Main API project
│   ├── SecondBrain.Data/     # Data access layer
│   ├── SecondBrain.Tests/    # Test projects
│   └── SecondBrain.PythonApi/# Python-based AI services
├── database/                 # Database project and migrations
├── public/                   # Static assets
└── .venv/                    # Python virtual environment
```

## Implementation Patterns

- **State Management**: React Context API with multiple context providers
- **Authentication**: JWT tokens with refresh token rotation
- **Theme System**: Multi-layered approach with CSS variables and Tailwind
- **AI Integration**: Provider-agnostic interface with specialized implementations
- **Data Synchronization**: Optimistic updates with rollback capabilities

## Important Implementation Details

1. The application uses a nested provider architecture which can lead to complex dependencies
2. Different AI providers have inconsistent streaming implementations
3. Bi-directional note linking uses redundant storage for quick traversal
4. The theme system has browser-specific optimizations, especially for Safari
5. RAG implementation is exclusively through OpenAI's Assistants API 
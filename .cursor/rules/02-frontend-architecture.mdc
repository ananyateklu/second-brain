---
description: Guidelines and patterns for the React frontend architecture
globs: frontend/**/*.ts, frontend/**/*.tsx, src/**/*.ts, src/**/*.tsx
alwaysApply: false
---
# Frontend Architecture

The Second Brain frontend is built with React 18, TypeScript, Vite, and TailwindCSS. It follows a context-based state management approach with optimized provider organization for different concerns.

## Directory Structure

```
frontend/
├── src/
│   ├── assets/               # Static assets (images, icons)
│   ├── components/           # React components
│   │   ├── Dashboard/        # Dashboard-related components
│   │   ├── shared/           # Shared/reusable components
│   │   ├── ErrorBoundary.tsx # Global error boundary component
│   │   ├── ProtectedRoute.tsx # Auth protection component
│   │   ├── LoginPage.tsx     # Authentication pages
│   │   ├── RegistrationPage.tsx
│   │   └── ThemeSelector.tsx # Theme selection component
│   ├── contexts/             # React Context providers
│   │   ├── *Context.tsx      # Context provider components
│   │   └── *contextUtils.ts  # Utils for respective contexts
│   ├── hooks/                # Custom React hooks
│   ├── routes/               # Route definitions and components
│   ├── services/             # Service layer for external interactions
│   │   ├── api/              # API client services
│   │   │   ├── api.ts        # Base API client with interceptors
│   │   │   └── *.service.ts  # Domain-specific API services
│   │   ├── ai/               # AI provider implementations
│   │   │   ├── models.ts     # AI model definitions
│   │   │   └── provider implementations
│   │   ├── notification/     # Notification services
│   │   ├── aiService.ts      # AI service main implementation
│   │   └── signalR.ts        # SignalR implementation for real-time features
│   ├── theme/                # Theme configuration
│   │   ├── theme.config.ts   # Theme definitions
│   │   └── themeConfig.types.ts # Theme type definitions
│   ├── types/                # TypeScript type definitions
│   ├── utils/                # Utility functions
│   │   ├── dashboard/        # Dashboard-specific utilities
│   │   ├── themeScript.ts    # Early-load theme script
│   │   └── *.utils.ts        # Domain-specific utilities
│   ├── App.tsx               # Main App component
│   ├── index.css             # Global CSS and Tailwind imports
│   └── main.tsx              # Application entry point
```

## Provider Architecture

The application uses a two-tiered context provider architecture in `App.tsx`:

```tsx
// Centralized context provider component to improve organization and performance
const AppProviders = ({ children }: { children: React.ReactNode }) => (
  <ErrorBoundary onError={logError}>
    <ThemeProvider>
      <BrowserRouter future={{
        v7_startTransition: true,
        v7_relativeSplatPath: true
      }}>
        <AuthProvider>
          {children}
        </AuthProvider>
      </BrowserRouter>
    </ThemeProvider>
  </ErrorBoundary>
);

// Feature-specific providers that are only loaded when needed
const FeatureProviders = ({ children }: { children: React.ReactNode }) => (
  <ErrorBoundary onError={logError}>
    <AIProvider>
      <RecordingProvider>
        <ActivityProvider>
          <ModalProvider>
            <TrashProvider>
              <RemindersProvider>
                <NotesWithRemindersProvider>
                  <TasksProvider>
                    <IdeasProvider>
                      <DashboardProvider>
                        {children}
                      </DashboardProvider>
                    </IdeasProvider>
                  </TasksProvider>
                </NotesWithRemindersProvider>
              </RemindersProvider>
            </TrashProvider>
          </ModalProvider>
        </ActivityProvider>
      </RecordingProvider>
    </AIProvider>
  </ErrorBoundary>
);
```

This improved organization loads app-wide providers first and feature-specific providers only when needed.

## Key Contexts

The application uses a comprehensive context system to manage state:

1. **AuthContext**: Authentication state, user profile and login/logout operations
2. **ThemeContext**: Theme settings and dynamic theme switching operations
3. **NotesWithRemindersContext**: Notes data, operations, and reminder integration
4. **TasksContext**: Task management, status updates, and filtering
5. **IdeasContext**: Ideas management and operations
6. **RemindersContext**: Time-based reminders and notifications
7. **AIContext**: AI provider configurations and chat operations
8. **DashboardContext**: Dashboard UI state, layouts, and visualization settings
9. **TrashContext**: Deleted items management with restoration capabilities
10. **ModalContext**: Centralized modal dialog management
11. **ActivityContext**: User activity tracking and history
12. **RecordingContext**: Audio recording for transcription and notes

Each context is split into a main Context file and a utility file that contains helper functions, types, and constants.

## Route Structure

The application uses React Router v6 for routing with these key features:

```tsx
// Application routes component
const AppRoutes = () => (
  <Suspense fallback={<LoadingScreen message="Loading application..." />}>
    <Routes>
      <Route path="/login" element={<LoginPage />} />
      <Route path="/register" element={<RegistrationPage />} />
      <Route
        path="/dashboard/*"
        element={
          <ProtectedRoute>
            <FeatureProviders>
              <Dashboard />
            </FeatureProviders>
          </ProtectedRoute>
        }
      />
      <Route path="/" element={<Navigate to="/dashboard" replace />} />
    </Routes>
  </Suspense>
);
```

Routes use lazy loading for improved performance and the `ProtectedRoute` component for authentication guards.

## Component Patterns

1. **Feature-based organization**: Components are organized by feature (Notes, Tasks, Ideas)
2. **Compound components**: Complex UI elements use compound component pattern
3. **Custom hooks**: Business logic is extracted into custom hooks
4. **Context consumers**: Components use context via custom hooks (`useNotes`, `useTasks`, etc.)
5. **Error boundaries**: Components are wrapped with error boundaries for resilience
6. **Lazy loading**: Route components are lazy-loaded for optimized performance
7. **Suspense**: Used with lazy loading to provide loading states

## AI Integration

The application integrates with multiple AI providers through a unified interface in `services/aiService.ts`:

```typescript
// AI Service structure in aiService.ts
export interface AIModel {
  id: string;
  name: string;
  provider: AIProvider;
  capabilities: ModelCapability[];
  contextWindow: number;
  maxOutputTokens: number;
  category: ModelCategory;
  isStreaming: boolean;
}

// Supported AI providers include:
// - OpenAI (GPT models)
// - Anthropic (Claude models)
// - Google (Gemini models)
// - Local models via Ollama
```

## SignalR Integration

The application uses SignalR for real-time communication with built-in reconnection handling:

```typescript
// SignalR connection with auth token and reconnection logic
export class SignalRService {
  private connection: signalR.HubConnection;
  
  constructor(hubUrl: string, getAccessToken: () => string | null) {
    this.connection = new signalR.HubConnectionBuilder()
      .withUrl(hubUrl, {
        accessTokenFactory: () => getAccessToken() || '',
      })
      .withAutomaticReconnect({
        nextRetryDelayInMilliseconds: this.getRetryDelay
      })
      .build();
  }
  
  // Advanced reconnection strategy with exponential backoff
  private getRetryDelay(retryContext: signalR.RetryContext): number {
    // Implementation details for retry logic
  }
}
```

## Data Visualization 

The application uses multiple visualization libraries:

1. **Chart.js & react-chartjs-2**: For dashboard statistics and data visualization
2. **Recharts**: For alternative charting needs
3. **Cytoscape.js**: For graph and network visualizations
4. **ReactFlow**: For workflow and connection diagrams

## Document Processing

The application includes rich document processing capabilities:

1. **PDF.js**: PDF rendering and text extraction
2. **Mammoth**: Word document conversion
3. **XLSX**: Spreadsheet processing
4. **Marked & React Markdown**: Markdown rendering
5. **KaTeX**: Mathematical notation rendering
6. **Mermaid**: Diagram rendering from text descriptions
7. **PrismJS**: Code syntax highlighting

## Authentication System

The authentication system uses a hybrid approach for secure token storage:

```typescript
// TokenManager in AuthContext.tsx
export class TokenManager {
  // In-memory storage for access token to avoid XSS attacks
  private static accessToken: string | null = null;
  
  // Local storage for refresh token for persistence
  private static readonly REFRESH_TOKEN_KEY = 'refresh_token';

  // Methods for token management
  static getAccessToken(): string | null { /* ... */ }
  static getRefreshToken(): string | null { /* ... */ }
  static setTokens(accessToken: string, refreshToken: string) { /* ... */ }
  static clearTokens() { /* ... */ }
}
```

## Theme System

The theme system uses a multi-layered approach with CSS variables, Tailwind classes, and an early-load script to prevent flash of unstyled content (FOUC):

```typescript
// Theme configuration with multiple color schemes
export const themes: Record<ThemeName, ThemeConfig> = {
  light: { /* Light theme colors and settings */ },
  dark: { /* Dark theme colors and settings */ },
  midnight: { /* Midnight theme colors and settings */ },
  'full-dark': { /* Full dark theme colors and settings */ }
};
```

## Technologies & Libraries

Key libraries and technologies used in the frontend:

- **React 18**: Core UI library with concurrent features
- **TypeScript**: Static typing
- **Vite**: Fast build tool and development server
- **TailwindCSS**: Utility-first CSS framework
- **React Router 6**: Routing with modern features
- **Axios**: HTTP client with interceptor support
- **SignalR**: Real-time communication
- **Headless UI**: Accessible UI components
- **Framer Motion**: Animation library
- **React Beautiful DnD**: Drag and drop functionality
- **AI SDKs**: OpenAI, Anthropic, Google Generative AI

## Performance Optimizations

1. **Code Splitting**: Lazy loading for route components
2. **Virtualization**: Using Tanstack Virtual for long lists
3. **Memoization**: Strategic use of useMemo and useCallback
4. **Suspense Boundaries**: Loading states for async operations
5. **Two-Tier Provider Structure**: Optimized context hierarchy

## Important Notes

1. **Error Handling**: All components should use error boundaries
2. **Provider Dependencies**: Some contexts depend on others being initialized first
3. **Optimistic Updates**: Many operations update local state before API calls complete
4. **Token Security**: Access tokens stored in memory, refresh tokens in localStorage
5. **Multi-theme Support**: Multiple themes with CSS variables and Tailwind integration
6. **AI Provider Abstraction**: Unified interface for multiple AI providers
7. **Responsive Design**: All UI components built with mobile-first approach 
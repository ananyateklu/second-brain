---
description: Implementation quirks, edge cases, and potential issues to be aware of when working with the codebase
globs: **/*.ts, **/*.tsx,*.ts
alwaysApply: false
---
# Dashboard Context and Handlers

## Overview

The dashboard system in Second Brain uses a separation of concerns pattern where the dashboard context manages the state and UI interactions, while specialized handlers perform the data calculations. This architecture allows for maintainable code with clear responsibilities.

## Dashboard Context

The dashboard context (`dashboardContextUtils.ts`) provides:

1. **State Management**: 
   - Tracks available and enabled statistics
   - Maintains stat configurations (size, order, graph visibility)
   - Provides loading states

2. **User Interactions**:
   - Toggle statistics on/off
   - Resize statistics
   - Reorder statistics
   - Toggle graph visibility
   - Reset to defaults

## Stat Handlers

Stat handlers are pure functions that:

1. Calculate specific metrics from provided data
2. Format values for display
3. Generate metadata for visualizations
4. Return standardized `StatValue` objects

## Integration Flow

1. Dashboard components consume the dashboard context
2. Context retrieves data from API services
3. Context passes data to the appropriate stat handlers via registry
4. Handlers calculate and return formatted values
5. Components render the values and visualizations

## Registry Pattern

The stats registry (`statsRegistry.ts`) serves as the integration point:

```typescript
// Define the stat handler type
type StatHandler = (data: StatHandlerData) => StatValue;

// Registry mapping stat IDs to their handler functions
const statsRegistry: Record<string, StatHandler> = {
    'connections': ({ notes }) => getConnectionsStatValue(notes),
    'total-notes-v2': ({ notes }) => getTotalNotesStatValue(notes),
    // ... more handlers
};
```

Benefits of this approach:
- Decoupled implementation of stat calculations
- Easy addition of new statistics
- Simplified testing of individual handlers
- Consistent error handling across all stats

## Handler Input Data

Handlers receive a consistent data structure:

```typescript
interface StatHandlerData {
    notes: Note[];
    tasks: Task[];
    reminders: Reminder[];
    activities: Activity[];
    isLoading: boolean;
}
```

This standardized input simplifies handler implementation and ensures access to all necessary data.

## Calculation Utilities

Common calculation utilities are shared across handlers:

- **Time-based calculations**: 
  - `calculateWeeklyChange`: Compares this week vs. last week
  - `formatTimeAgo`: Formats dates as relative time

- **Chart data utilities**:
  - `generateDailyBreakdown`: Creates time series data
  - `createWordCountDistribution`: Formats data for histograms

## Extending the System

To add a new dashboard statistic:

1. Create a handler function in an appropriate file under `statsHandlers/`
2. Register the handler in `statsRegistry.ts`
3. Add the stat definition to `DEFAULT_STATS`
4. Implement any specialized visualization components if needed

## Performance Considerations

- Handlers should be optimized for frequent recalculation
- Avoid expensive operations for frequently updated stats
- Consider memoization for complex calculations
- Handle large datasets efficiently (sampling, aggregation) 
---
description: Implementation quirks, edge cases, and potential issues to be aware of when working with the codebase
globs: **/*.ts, **/*.tsx, **/*.cs, **/*.py, **/*.js, **/*.jsx
alwaysApply: false
---

# Implementation Quirks and Edge Cases

Second Brain has several implementation quirks and edge cases that developers should be aware of. This document outlines specific areas that require careful handling to avoid unexpected behavior.

## SignalR Implementation

### Connection Management Complexity

- **Reconnection Strategy**: Uses exponential backoff with configurable retry counts and limits
  ```typescript
  nextRetryDelayInMilliseconds: (retryContext) => {
    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      return null; // Stop trying after max attempts
    }
    
    const baseDelay = 1000; // 1 second
    const delay = Math.min(
      baseDelay * Math.pow(2, retryContext.previousRetryCount),
      30000 // Max 30 seconds
    );
    
    this.reconnectAttempts++;
    return delay;
  }
  ```

- **Event Re-Registration**: Events are stored in a `pendingEvents` array and reregistered after connection is restored
  ```typescript
  private async reregisterEvents() {
    console.log('[SignalR] Reregistering events:', this.pendingEvents);
    for (const event of this.pendingEvents) {
      this.connection.on(event.eventName, event.callback);
    }
  }
  ```

- **Silent Failures**: Some connection errors only log to console without user notification
  ```typescript
  // Missing user feedback
  catch (error) {
    console.error('[SignalR] Error initializing SignalR:', error);
    // No user notification
  }
  ```

## AI Streaming Implementation

### Provider-Specific Implementations

Each AI provider implements streaming differently, requiring provider-specific handling:

#### OpenAI Streaming

```csharp
// OpenAI streaming with chunked responses
using (var response = await client.DownloadStreamAsync(request))
using (var reader = new StreamReader(response))
{
    string line;
    while ((line = await reader.ReadLineAsync()) != null)
    {
        // Process SSE data format
        if (line.StartsWith("data: ") && !line.Contains("data: [DONE]"))
        {
            var data = line.Substring(6);
            // Parse and send via SignalR
            await _hubContext.Clients.User(userId).SendAsync("ReceiveMessage", parseResult);
        }
    }
}
```

#### Claude Streaming

```csharp
// Claude streaming with custom implementation
using (var response = await _httpClient.SendAsync(request, HttpCompletionOption.ResponseHeadersRead))
{
    using (var stream = await response.Content.ReadAsStreamAsync())
    using (var reader = new StreamReader(stream))
    {
        while (!reader.EndOfStream)
        {
            var line = await reader.ReadLineAsync();
            if (string.IsNullOrEmpty(line) || !line.StartsWith("{")) continue;
            
            try {
                // Parse and send via SignalR
                await _hubContext.Clients.User(userId).SendAsync("ReceiveMessage", message);
            }
            catch (Exception ex) {
                _logger.LogError(ex, "Error processing Claude stream");
            }
        }
    }
}
```

#### Llama/Ollama Streaming

```typescript
// Llama streaming with EventSource
const eventSource = new EventSource(`${BASE_URL}/api/llama/stream?prompt=${encodeURIComponent(message)}&modelId=${encodeURIComponent(modelId)}`);

eventSource.onmessage = (event) => {
  try {
    const data = JSON.parse(event.data);
    // Process streaming response
    messageCallback(data.content);
  } catch (error) {
    console.error('Error parsing SSE message:', error);
  }
};
```

#### Gemini Implementation

Gemini appears to lack streaming support entirely, requiring a completely different approach.

## Bidirectional Note Linking

### Redundant Storage

Links are stored twice for bidirectional access, creating synchronization challenges:

```csharp
// Create link in both directions
var noteLink = new NoteLink { NoteId = id, LinkedNoteId = request.TargetNoteId };
var reverseLink = new NoteLink { NoteId = request.TargetNoteId, LinkedNoteId = id };

_context.NoteLinks.AddRange(noteLink, reverseLink);
await _context.SaveChangesAsync();
```

### Deletion Complexity

When removing links, both records must be found and deleted:

```csharp
var links = await _context.NoteLinks
    .Where(nl => (nl.NoteId == id && nl.LinkedNoteId == targetNoteId) ||
                (nl.NoteId == targetNoteId && nl.LinkedNoteId == id))
    .ToListAsync();

_context.NoteLinks.RemoveRange(links);
await _context.SaveChangesAsync();
```

### Model Mismatch

Frontend and backend link models are different, requiring transformation:

```typescript
// Frontend model
export interface NoteLink {
  source: string;
  target: string;
  type: string;
}

// Backend model
public class NoteLink {
  [Required]
  [MaxLength(36)]
  public string NoteId { get; set; } = string.Empty;
  public Note Note { get; set; } = null!;
  [Required]
  [MaxLength(36)]
  public string LinkedNoteId { get; set; } = string.Empty;
  public Note LinkedNote { get; set; } = null!;
  public bool IsDeleted { get; set; } = false;
}
```

## RAG Implementation

### OpenAI Dependency

RAG is implemented exclusively using OpenAI's Assistants API, with no support for other providers:

```csharp
public class RagService
{
    private readonly HttpClient _httpClient;
    private readonly ILogger<RagService> _logger;
    private readonly string _apiEndpoint = "https://api.openai.com/v1";
    private const string JsonMediaType = "application/json";
    // ...
}
```

### Incomplete Implementation

Despite code references to RAG in the routing logic, the implementation has gaps:

```typescript
if (model.category === 'rag') {
  throw new Error('RAG models not implemented yet');
}
```

### Resource Management

RAG resources (assistants, files) require manual cleanup:

```typescript
const handleCleanup = async () => {
  if (assistantId) {
    await ragService.deleteAssistant(assistantId);
  }
  if (fileId) {
    await ragService.deleteFile(fileId);
  }
  setFile(null);
  setFileId(null);
  setAssistantId(null);
  setInstructions('');
};
```

## Theme System Quirks

### Multi-Layer Theme Application

The theme system uses multiple mechanisms simultaneously:

```typescript
// Apply CSS variables
Object.entries(theme.colors).forEach(([key, value]) => {
  root.style.setProperty(`--${key}`, value);
  root.style.setProperty(`--color-${key}`, value);
});

// Apply Tailwind classes
root.classList.remove('light', 'dark', 'midnight');
root.classList.add(themeName);

// Set color-scheme property
root.style.colorScheme = themeName === 'light' ? 'light' : 'dark';
```

### Safari-Specific Hacks

Extensive Safari-specific handling appears throughout the codebase:

```typescript
// Safari detection
const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);

// Safari-specific fixes
if (isSafari) {
  // Force repaint hack
  body.style.display = 'none';
  void body.offsetHeight;
  body.style.display = '';
}
```

### Theme Initialization Script

The theme initialization script is generated but the injection mechanism isn't explicitly defined:

```typescript
export const themeScript = `
  (function() {
    try {
      const savedTheme = localStorage.getItem('theme');
      const systemDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
      
      // Theme initialization logic...
    } catch (e) {
      console.error('Error applying initial theme:', e);
    }
  })();
`;
```

## Context Provider Architecture Issues

### Excessive Nesting

The application uses deeply nested context providers:

```tsx
<ThemeProvider>
  <BrowserRouter>
    <AuthProvider>
      <AIProvider>
        <RecordingProvider>
          <ActivityProvider>
            <ModalProvider>
              <TrashProvider>
                <RemindersProvider>
                  <NotesWithRemindersProvider>
                    <TasksProvider>
                      <DashboardProvider>
                        {/* Application Routes */}
                      </DashboardProvider>
                    </TasksProvider>
                  </NotesWithRemindersProvider>
                </RemindersProvider>
              </TrashProvider>
            </ModalProvider>
          </ActivityProvider>
        </RecordingProvider>
      </AIProvider>
    </AuthProvider>
  </BrowserRouter>
</ThemeProvider>
```

### Context Initialization Dependencies

Some contexts rely on others being initialized first:

```typescript
// In AIContext.tsx
const { user } = useAuth(); // Depends on AuthContext being initialized

// In NotesContext.tsx
const { activities, logActivity } = useActivity(); // Depends on ActivityContext
```

### Duplicate Error States

Many contexts maintain their own error state with no coordination:

```typescript
// In NotesContext
const [error, setError] = useState<string | null>(null);

// In TasksContext
const [error, setError] = useState<string | null>(null);

// In AIContext
const [error, setError] = useState<string | null>(null);
```

## Authentication Flow Quirks

### LocalStorage Token Storage

Access tokens are stored in localStorage, which is vulnerable to XSS attacks:

```typescript
localStorage.setItem('access_token', response.accessToken);
```

### SignalR URL Token Security Concern

Tokens can be passed in URL parameters which creates security risks:

```csharp
var accessToken = context.Request.Query["access_token"];
var path = context.HttpContext.Request.Path;
if (!string.IsNullOrEmpty(accessToken) && path.StartsWithSegments("/toolHub")) {
  context.Token = accessToken;
}
```

### Token Refresh Race Conditions

Multiple concurrent requests hitting 401 can trigger multiple refresh attempts:

```typescript
if (error.response?.status === 401 && !originalRequest._retry) {
  originalRequest._retry = true;
  // No locking mechanism for concurrent refreshes
}
```

## Database Entity Management Quirks

### Inconsistent Soft Delete

Soft delete pattern is implemented inconsistently:

```csharp
// Some entities have soft delete
public bool IsDeleted { get; set; }
public DateTime? DeletedAt { get; set; }

// Others don't
// No IsDeleted property
```

### Query Filter Bypassing

Some queries may bypass the soft delete filter:

```csharp
// Correctly applies filter
var notes = await _context.Notes.ToListAsync();

// Bypasses filter with explicit loading
var note = await _context.Notes.FindAsync(id);
await _context.Entry(note).Collection(n => n.Tags).LoadAsync();
```

### Controller-Level Soft Delete Logic

Much of the soft delete logic is in controllers rather than data layer:

```csharp
// Controller-level soft delete
note.IsDeleted = true;
note.DeletedAt = DateTime.UtcNow;
await _context.SaveChangesAsync();
```

## Frontend/Backend Type Synchronization

### Type Definition Inconsistencies

Frontend and backend define their own versions of the same entities:

```typescript
// Frontend Note type
export interface Note {
  id: string;
  title: string;
  content: string;
  createdAt: string;
  updatedAt: string | null;
  isPinned: boolean;
  isFavorite: boolean;
  isArchived: boolean;
  userId: string;
  tags: Tag[];
  linkedNoteIds: string[]; // Simple array of IDs
}
```

```csharp
// Backend Note entity
public class Note
{
  public string Id { get; set; } = Guid.NewGuid().ToString();
  public string Title { get; set; } = string.Empty;
  public string Content { get; set; } = string.Empty;
  public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
  public DateTime? UpdatedAt { get; set; }
  public bool IsPinned { get; set; }
  public bool IsFavorite { get; set; }
  public bool IsArchived { get; set; }
  public bool IsDeleted { get; set; }
  public DateTime? DeletedAt { get; set; }
  public string UserId { get; set; } = string.Empty;
  public User User { get; set; } = null!;
  public List<NoteLink> NoteLinks { get; set; } = new(); // Complex navigation property
  public List<Tag> Tags { get; set; } = new();
  public List<TaskItemNote> TaskNotes { get; set; } = new();
}
```

### Enum Inconsistencies

Enums are defined differently between frontend and backend:

```typescript
// Frontend enum as string union
export type TaskPriority = 'Low' | 'Medium' | 'High' | 'Urgent';
```

```csharp
// Backend enum as numeric
public enum TaskPriority
{
  Low = 0,
  Medium = 1,
  High = 2,
  Urgent = 3
}
```

## File Handling Quirks

### Mixed Upload Approaches

The application uses both FormData and JSON approaches for file handling:

```typescript
// FormData approach
const formData = new FormData();
formData.append('file', file);

const response = await api.post('/api/ai/rag/upload', formData, {
  headers: {
    'Content-Type': 'multipart/form-data',
  },
});
```

### Special Media Response Handling

Non-JSON responses require special handling:

```csharp
// Return the audio stream directly with the correct content type
return File(response.AudioStream, "audio/mpeg");
```

## Error Handling Inconsistencies

### Missing Error Boundaries

The React application has no top-level error boundary, leading to potential crashes.

### Swallowed Errors

Many API errors are caught but not passed to UI:

```typescript
try {
  // API call
} catch (error) {
  console.error('Error:', error);
  // No error state update or user notification
}
```

### Console-Only Errors

Many error handlers only log to console:

```typescript
catch (error) {
  console.error('[SignalR] Error initializing SignalR:', error);
  // No user notification
}
```

## Working Around Quirks

### SignalR Reconnection

When working with SignalR, ensure you handle connection drops:

```typescript
// Clean up connection properly on component unmount
useEffect(() => {
  const startConnection = async () => {
    try {
      await signalRService.start();
      // Register event handlers after successful connection
      signalRService.on("ReceiveMessage", handleMessage);
    } catch (error) {
      console.error("Error starting SignalR:", error);
      // Show user-friendly notification
      setError("Connection issue. Please refresh the page.");
    }
  };
  
  startConnection();
  
  return () => {
    // Important: Clean up
    signalRService.off("ReceiveMessage", handleMessage);
    signalRService.stop();
  };
}, []);
```

### Link Management

When working with bidirectional links, ensure you handle both directions:

```typescript
// Creating links
const createLink = async (sourceId, targetId) => {
  try {
    await linkService.createLink(sourceId, targetId);
    // Refresh both source and target items to reflect new links
    await refreshItem(sourceId);
    await refreshItem(targetId);
  } catch (error) {
    console.error("Error creating link:", error);
    // Show user notification
  }
};

// Removing links
const removeLink = async (sourceId, targetId) => {
  try {
    await linkService.removeLink(sourceId, targetId);
    // Important: Refresh both items
    await refreshItem(sourceId);
    await refreshItem(targetId);
  } catch (error) {
    console.error("Error removing link:", error);
    // Show user notification
  }
};
```

### Theme System

When working with the theme system, handle Safari-specific issues:

```typescript
// Safe theme application
const applyTheme = (themeName) => {
  try {
    // Apply CSS variables
    // Apply Tailwind classes
    
    // Detect Safari
    const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    if (isSafari) {
      // Apply Safari-specific fixes
      applySafariWorkarounds(themeName);
    }
    
    // Force re-render of problematic components
    setThemeApplied(prev => !prev);
  } catch (error) {
    console.error("Error applying theme:", error);
    // Fall back to default theme
    applyDefaultTheme();
  }
};
```

### Context Dependencies

When a component needs multiple contexts, be careful about dependency order:

```tsx
function SomeComponent() {
  // Get auth first as other contexts may depend on it
  const { user, isAuthenticated } = useAuth();
  
  // Skip other contexts if not authenticated
  if (!isAuthenticated) return <LoginRedirect />;
  
  // Now use other contexts that might depend on auth
  const { notes } = useNotes();
  const { tasks } = useTasks();
  
  // Component implementation
}
```

### API Error Handling

Implement consistent error handling for API calls:

```typescript
const fetchData = async () => {
  try {
    setIsLoading(true);
    setError(null);
    const data = await apiService.getData();
    setData(data);
  } catch (error) {
    // Standardized error handling
    const message = error.response?.data?.message || 'An error occurred';
    setError(message);
    // User notification
    showToast(message, 'error');
  } finally {
    setIsLoading(false);
  }
};
``` 
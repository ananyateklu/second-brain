---
description: Guidelines and patterns for the multi-layered theme system implementation
globs: **/*theme*.ts, **/*theme*.tsx, **/*Theme*.ts, **/*Theme*.tsx, **/*.css, **/*.scss, tailwind.config.js
alwaysApply: false
---
## Core Components

1. **Theme Configuration**
   - `frontend/src/theme/theme.config.ts`: Defines theme colors and properties
   - `frontend/src/theme/themeConfig.types.ts`: TypeScript types for theme system
   - `frontend/src/contexts/themeContextUtils.ts`: Context utilities and hook (`useTheme`)
   - `frontend/src/contexts/ThemeContext.tsx`: Provider implementation (`ThemeProvider`), theme application logic (`applyTheme`), and initial theme detection (`getInitialTheme`)

2. **Theme UI Components**
   - `frontend/src/components/ThemeSelector.tsx`: Main theme selection UI
   - `frontend/src/components/shared/ThemeDropdown.tsx`: Alternative compact dropdown UI

## Theme Initialization Process

The theme system initializes the theme when the `ThemeProvider` component mounts:

### Phase 1: Initial Theme Detection

The initial theme is determined *before* the first render within the `ThemeProvider` using the `getInitialTheme` function. This function checks `localStorage` first, then falls back to the user's system preference via `window.matchMedia`.

```typescript
// frontend/src/contexts/ThemeContext.tsx
const getInitialTheme = (): ThemeName => {
  const savedTheme = localStorage.getItem('theme') as ThemeName;
  if (savedTheme && themes[savedTheme]) {
    return savedTheme;
  }
  return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
};
```
This value is used as the initial state for the `themeName` in the `ThemeProvider`.

### Phase 2: React Context Initialization and Application

The `ThemeProvider` manages the theme state and applies the theme using an effect hook.

```typescript
// frontend/src/contexts/ThemeContext.tsx
export function ThemeProvider({ children }: { children: React.ReactNode }) {
  const [themeName, setThemeName] = useState<ThemeName>(getInitialTheme());

  useEffect(() => {
    // Persist theme choice to localStorage
    localStorage.setItem('theme', themeName);
    // Apply the theme styles to the DOM
    applyTheme(themeName);
  }, [themeName]); // Re-apply theme whenever themeName changes

  const toggleTheme = useCallback(() => {
    // Logic to cycle through themes
    setThemeName(prev => {
      switch (prev) {
        case 'light': return 'dark';
        case 'dark': return 'midnight';
        case 'midnight': return 'light';
        default: return 'light';
      }
    });
  }, []);

  const setTheme = useCallback((name: ThemeName) => {
    // Logic to set a specific theme
    if (themes[name]) {
      setThemeName(name);
    }
  }, []);

  const contextValue = useMemo(() => ({
    theme: themeName,
    toggleTheme,
    setTheme,
    colors: themes[themeName].colors
  }), [themeName, toggleTheme, setTheme]);

  return (
    <ThemeContext.Provider value={contextValue}>
      {children}
    </ThemeContext.Provider>
  );
}
```

### CSS Variables Application

The `applyTheme` function, located within `frontend/src/contexts/ThemeContext.tsx`, handles applying the theme styles to the document root (`<html>`).

```typescript
// frontend/src/contexts/ThemeContext.tsx
const applyTheme = (themeName: ThemeName) => {
  const theme = themes[themeName];
  const root = document.documentElement;
  const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);

  // Remove existing theme classes
  root.classList.remove('light', 'dark', 'midnight');
  // Add the current theme class (for Tailwind's darkMode: 'class')
  root.classList.add(themeName);

  // Set data-theme attribute (potentially for CSS selectors)
  root.setAttribute('data-theme', themeName);
  
  // Set color-scheme CSS property for browser UI hints
  root.style.colorScheme = themeName === 'light' ? 'light' : 'dark';

  // Apply theme colors as CSS variables
  Object.entries(theme.colors).forEach(([key, value]) => {
    // Set both formats for potential compatibility needs
    root.style.setProperty(`--${key}`, value);
    root.style.setProperty(`--color-${key}`, value);
  });

  // Apply Safari-specific fixes
  if (isSafari) {
    // Specific background color adjustments and repaint logic...
  }
  
  // Update meta theme-color for mobile browsers
  const metaThemeColor = document.querySelector('meta[name=\"theme-color\"]');
  if (metaThemeColor) {
    metaThemeColor.setAttribute('content', theme.colors.background);
  }
};
```

### Tailwind Integration

TailwindCSS is configured to use the `class` strategy for dark mode (`darkMode: 'class'`). The `applyTheme` function adds the corresponding theme name (`light`, `dark`, or `midnight`) as a class to the `<html>` element.

However, the `tailwind.config.js` **does not** directly map its color palette (e.g., `theme.extend.colors.primary`) to the CSS variables set by `applyTheme`. Instead, it defines its own set of semantic color names and palettes.

```javascript
// frontend/tailwind.config.js (Simplified)
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  darkMode: 'class', // Enables class-based dark mode (e.g., .dark .bg-...)
  theme: {
    extend: {
      colors: {
        // Example: Custom 'primary' palette, independent of CSS variables
        primary: {
          50: '#f0f9f1',
          // ... other shades
          500: '#4a9153',
          // ... other shades
        },
        // Example: Custom 'dark' theme colors
        dark: {
          bg: {
            DEFAULT: '#121212',
            secondary: '#1a1a1a',
          },
          // ... other dark theme specific colors
        },
        // NOTE: No direct mapping like 'primary: var(--color-primary)'
      },
      // ... other extensions (keyframes, animations)
    }
  },
  plugins: [],
};
```

Components primarily use Tailwind utility classes (e.g., `bg-primary`, `text-gray-700`, `dark:text-gray-200`). These classes resolve to the values defined in `tailwind.config.js`, leveraging the `dark:` variant selector which is enabled by the theme class on the `<html>` element.

### Component Usage

Components utilize themes through various strategies:

1.  **Tailwind Classes (Most Common)**: Using standard Tailwind utilities that leverage the `darkMode: 'class'` strategy and the custom palettes in `tailwind.config.js`.
    ```tsx
    // Uses Tailwind's 'primary' color from config, and dark variant
    <button className="bg-primary text-white dark:bg-primary/90 hover:bg-primary/90 dark:hover:bg-primary/80">
      Primary Action
    </button>
    ```

2.  **Mixed Tailwind and CSS Variables**: Some components, especially theme switchers or those needing Safari fixes, might conditionally use direct CSS variables alongside Tailwind.
    ```tsx
    // frontend/src/components/ThemeSelector.tsx (Conceptual Example)
    <div className={`p-2 rounded-lg ${isSafari ? 'bg-gray-900/30' : 'bg-[var(--color-secondary)]/30'}`}>
      {/* ... buttons ... */}
    </div>
    ```

3.  **Tailwind with Hardcoded Values**: Some components calculate styles based on the current theme state and apply them using Tailwind classes with hardcoded values (often RGBA for transparency effects).
    ```tsx
    // frontend/src/components/shared/ThemeDropdown.tsx (Conceptual Example)
    const getDropdownClasses = () => {
      // ... base classes ...
      switch (theme) {
        case 'midnight':
          return `${baseClasses} bg-[rgba(30,41,59,0.95)] border-[rgba(30,41,59,0.6)]`; // Hardcoded RGBA
        // ... other cases
      }
    };
    ```

4.  **Direct CSS Variable Usage**: Less common for general styling, but possible.
    ```tsx
    <div style={{ backgroundColor: 'var(--color-surface)' }}>
      Custom Background
    </div>
    ```

## Theme Selection UI

The main theme selection UI is implemented in `frontend/src/components/ThemeSelector.tsx`.

```typescript
// frontend/src/components/ThemeSelector.tsx
export function ThemeSelector() {
  const { theme, setTheme } = useTheme();
  const [mounted, setMounted] = useState(false);
  const [isSafari, setIsSafari] = useState(false);

  useEffect(() => {
    // Check if browser is Safari
    setIsSafari(/^((?!chrome|android).)*safari/i.test(navigator.userAgent));
    setMounted(true);
  }, []);

  // Only render after mounting to prevent hydration mismatch on server/client
  if (!mounted) {
    // Render a placeholder or null during server render/initial mount
    return <div className="w-[200px] h-[44px] bg-[var(--color-secondary)]/30 rounded-lg animate-pulse" />;
  }

  // ... rest of the component logic to render buttons for each theme ...
  // Applies styles conditionally using Tailwind, CSS variables, and hardcoded values
}
```
An alternative dropdown UI exists in `frontend/src/components/shared/ThemeDropdown.tsx`.

## Important Theme System Quirks

1.  **Multiple Styling Approaches**: The system uses CSS variables, Tailwind utility classes (based on a separate config), and dynamically generated inline styles or Tailwind classes with hardcoded values. This requires understanding which method is used in a given component.
2.  **Safari-Specific Hacks**: Extensive Safari-specific code exists in `applyTheme` and theme UI components, including forced repaints and alternative styling logic.
3.  **Theme Application Complexity**: The `applyTheme` function involves multiple steps (setting CSS variables, adding/removing classes, setting attributes/properties, handling browser specifics) that must stay synchronized.
4.  **Initialization Timing**: Theme initialization relies on React component lifecycle (`useState`, `useEffect` in `ThemeProvider`). There's no separate pre-hydration script, meaning the initial theme state is determined and applied as React hydrates.
5.  **Limited Transitions**: Theme transitions might be inconsistent if the `.theme-transition` class (mentioned in `index.css`) isn't applied globally or if styles change outside of the properties covered by the transition (color, background-color, border-color).
6.  **System Preference Detection**: System dark mode preference is only checked once during the initial load via `getInitialTheme`. The application does not react dynamically if the user changes their system theme while the app is open. 
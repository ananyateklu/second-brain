---
description: Guidelines and patterns for the database structure and entity relationships
globs: **/*.cs, **/*Context*.cs, **/*Entity*.cs, **/Entities/**/*.cs, **/Migrations/**/*.cs, **/Models/**/*.cs
---

# Database Structure

Second Brain uses Entity Framework Core with SQL Server as its database backend. The database schema is defined using code-first approach with entity configurations and migrations managed by EF Core.

## Database Context

The application's database context is defined in `DataContext.cs` in the `SecondBrain.Data` project:

```csharp
public class DataContext : DbContext
{
    public DataContext(DbContextOptions<DataContext> options) : base(options) { }
    
    public DbSet<User> Users { get; set; }
    public DbSet<Note> Notes { get; set; }
    public DbSet<Idea> Ideas { get; set; }
    public DbSet<TaskItem> Tasks { get; set; }
    public DbSet<Reminder> Reminders { get; set; }
    public DbSet<Tag> Tags { get; set; }
    public DbSet<NoteLink> NoteLinks { get; set; }
    public DbSet<TaskLink> TaskLinks { get; set; }
    public DbSet<ReminderLink> ReminderLinks { get; set; }
    public DbSet<Activity> Activities { get; set; }
    public DbSet<Achievement> Achievements { get; set; }
    public DbSet<UserAchievement> UserAchievements { get; set; }
    public DbSet<RefreshToken> RefreshTokens { get; set; }
    public DbSet<AgentChat> AgentChats { get; set; }
    public DbSet<AgentMessage> AgentMessages { get; set; }
    public DbSet<NexusStorage> NexusStorage { get; set; }
    
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);
        
        // Entity configurations...
        // Relationship mappings...
        // Query filters...
    }
}
```

## Entity Relationships

The main entity relationships are structured as follows:

```
User
 ├── Notes
 ├── Ideas
 ├── TaskItems
 ├── Reminders
 ├── Activities
 ├── UserAchievements
 └── RefreshTokens

Note
 ├── NoteLinks (bidirectional)
 ├── Tags
 └── TaskItemNotes

Idea
 └── IdeaLinks

TaskItem
 ├── TaskLinks
 ├── TaskItemNotes
 └── TaskItemTags

Reminder
 └── ReminderLinks

Achievement
 └── UserAchievements
```

## Key Entity Definitions

### User

```csharp
public class User
{
    public string Id { get; set; } = Guid.NewGuid().ToString();
    public string Email { get; set; } = string.Empty;
    public string Username { get; set; } = string.Empty;
    public string PasswordHash { get; set; } = string.Empty;
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
    public DateTime? UpdatedAt { get; set; }
    public string? AvatarUrl { get; set; }
    public int ExperiencePoints { get; set; } = 0;
    public int Level { get; set; } = 1;

    // Navigation properties
    public List<RefreshToken> RefreshTokens { get; set; } = new();
    public List<UserAchievement> UserAchievements { get; set; } = new();
}
```

### Note

```csharp
public class Note
{
    public string Id { get; set; } = Guid.NewGuid().ToString();
    public string Title { get; set; } = string.Empty;
    public string Content { get; set; } = string.Empty;
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
    public DateTime? UpdatedAt { get; set; }
    public bool IsPinned { get; set; }
    public bool IsFavorite { get; set; }
    public bool IsArchived { get; set; }
    public bool IsDeleted { get; set; }
    public DateTime? DeletedAt { get; set; }
    public string UserId { get; set; } = string.Empty;
    public User User { get; set; } = null!;

    // Navigation properties
    public List<NoteLink> SourceLinks { get; set; } = new();
    public List<NoteLink> TargetLinks { get; set; } = new();
    public List<Tag> Tags { get; set; } = new();
    public List<TaskItemNote> TaskNotes { get; set; } = new();
}
```

### TaskItem

```csharp
public class TaskItem
{
    public string Id { get; set; } = Guid.NewGuid().ToString();
    public string Title { get; set; } = string.Empty;
    public string? Description { get; set; }
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
    public DateTime? UpdatedAt { get; set; }
    public DateTime? DueDate { get; set; }
    public DateTime? CompletedAt { get; set; }
    public string UserId { get; set; } = string.Empty;
    public User User { get; set; } = null!;
    public TaskPriority Priority { get; set; } = TaskPriority.Medium;
    public TaskStatus Status { get; set; } = TaskStatus.NotStarted;
    public bool IsDeleted { get; set; }
    public DateTime? DeletedAt { get; set; }

    // Navigation properties
    public List<TaskLink> SourceLinks { get; set; } = new();
    public List<TaskLink> TargetLinks { get; set; } = new();
    public List<TaskItemNote> TaskNotes { get; set; } = new();
    public List<TaskItemTag> TaskTags { get; set; } = new();
}
```

### Reminder

```csharp
public class Reminder
{
    public string Id { get; set; } = Guid.NewGuid().ToString();
    public string Title { get; set; } = string.Empty;
    public string? Description { get; set; }
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
    public DateTime? UpdatedAt { get; set; }
    public DateTime ReminderDate { get; set; }
    public bool IsCompleted { get; set; }
    public DateTime? CompletedAt { get; set; }
    public ReminderPriority Priority { get; set; } = ReminderPriority.Medium;
    public ReminderRepeatType RepeatType { get; set; } = ReminderRepeatType.None;
    public string UserId { get; set; } = string.Empty;
    public User User { get; set; } = null!;
    public bool IsDeleted { get; set; }
    public DateTime? DeletedAt { get; set; }

    // Navigation properties
    public List<ReminderLink> Links { get; set; } = new();
}
```

## Bidirectional Linking

The application implements bidirectional linking between entities (especially Notes) using redundant storage:

```csharp
// NoteLink entity
public class NoteLink
{
    public string Id { get; set; } = Guid.NewGuid().ToString();
    public string SourceNoteId { get; set; } = string.Empty;
    public Note SourceNote { get; set; } = null!;
    public string TargetNoteId { get; set; } = string.Empty;
    public Note TargetNote { get; set; } = null!;
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
}
```

When two notes are linked, both directions are stored:

```csharp
// Create link in both directions
var noteLink = new NoteLink { NoteId = id, LinkedNoteId = request.TargetNoteId };
var reverseLink = new NoteLink { NoteId = request.TargetNoteId, LinkedNoteId = id };

_context.NoteLinks.AddRange(noteLink, reverseLink);
await _context.SaveChangesAsync();
```

When removing links, both records must be found and deleted:

```csharp
var links = await _context.NoteLinks
    .Where(nl => (nl.NoteId == id && nl.LinkedNoteId == targetNoteId) ||
                 (nl.NoteId == targetNoteId && nl.LinkedNoteId == id))
    .ToListAsync();

_context.NoteLinks.RemoveRange(links);
await _context.SaveChangesAsync();
```

## Entity Configurations

Entity configurations are defined in the `DataContext.OnModelCreating` method:

```csharp
// Note entity configuration
modelBuilder.Entity<Note>(entity =>
{
    entity.HasKey(e => e.Id);
    
    entity.Property(e => e.Title)
        .IsRequired()
        .HasMaxLength(200);
    
    entity.Property(e => e.Content)
        .IsRequired();
    
    entity.HasOne(e => e.User)
        .WithMany()
        .HasForeignKey(e => e.UserId)
        .OnDelete(DeleteBehavior.Cascade);
    
    // Tag relationships
    entity.HasMany(e => e.Tags)
        .WithMany(e => e.Notes)
        .UsingEntity(j => j.ToTable("NoteTags"));
    
    // Soft delete filter
    entity.HasQueryFilter(e => !e.IsDeleted);
});
```

## Soft Delete Pattern

Many entities implement a soft delete pattern:

```csharp
// Entity with soft delete
public bool IsDeleted { get; set; }
public DateTime? DeletedAt { get; set; }

// Query filter in DataContext
modelBuilder.Entity<Note>().HasQueryFilter(e => !e.IsDeleted);
```

When deleting items, they're marked as deleted rather than removed:

```csharp
// Controller-level soft delete
note.IsDeleted = true;
note.DeletedAt = DateTime.UtcNow;
await _context.SaveChangesAsync();
```

Restoration is possible:

```csharp
// Controller-level restore
note.IsDeleted = false;
note.DeletedAt = null;
await _context.SaveChangesAsync();
```

## Important Database Quirks

1. **Inconsistent Soft Delete**: Not all entities implement soft delete
   ```csharp
   // Note entity has soft delete
   public bool IsDeleted { get; set; }
   public DateTime? DeletedAt { get; set; }
   
   // But Idea entity doesn't
   // No IsDeleted property
   ```

2. **Query Filter Bypassing**: Some queries may bypass the query filter
   ```csharp
   // Correctly applies filter
   var notes = await _context.Notes.ToListAsync();
   
   // Bypasses filter with explicit loading
   var note = await _context.Notes.FindAsync(id);
   await _context.Entry(note).Collection(n => n.Tags).LoadAsync();
   ```

3. **Relationship Challenges**: Soft-deleted entities may still be referenced
   ```csharp
   // No check for deleted status in link query
   var links = await _context.NoteLinks
       .Where(nl => nl.SourceNoteId == noteId || nl.TargetNoteId == noteId)
       .ToListAsync();
   ```

4. **Controller-Level Logic**: Much of the soft delete logic is implemented at the controller level rather than in the data layer
   ```csharp
   // Controller-level soft delete
   note.IsDeleted = true;
   note.DeletedAt = DateTime.UtcNow;
   await _context.SaveChangesAsync();
   ```

5. **Missing Concurrency Tokens**: Most entities do not have explicit concurrency tokens
   ```csharp
   // No concurrency token properties
   public class Note
   {
       // Properties without ConcurrencyCheck or Timestamp attribute
   }
   ```

6. **Transaction Inconsistencies**: Not all multi-entity operations use explicit transactions
   ```csharp
   // No explicit transaction for multiple operations
   _context.Notes.Update(note);
   _context.NoteLinks.AddRange(links);
   await _context.SaveChangesAsync();
   ```

## Common Database Patterns

### Entity Fetching with Eager Loading

```csharp
// Fetching notes with tags and links
var notes = await _context.Notes
    .Include(n => n.Tags)
    .Include(n => n.SourceLinks)
        .ThenInclude(nl => nl.TargetNote)
    .Where(n => n.UserId == userId && !n.IsArchived)
    .OrderByDescending(n => n.UpdatedAt ?? n.CreatedAt)
    .ToListAsync();
```

### Pagination

```csharp
// Pagination pattern
var pagedNotes = await _context.Notes
    .Where(n => n.UserId == userId && !n.IsArchived)
    .OrderByDescending(n => n.UpdatedAt ?? n.CreatedAt)
    .Skip((page - 1) * pageSize)
    .Take(pageSize)
    .ToListAsync();
```

### Data Filtering

```csharp
// Common filtering patterns
var filteredNotes = await _context.Notes
    .Where(n => n.UserId == userId)
    .WhereIf(!string.IsNullOrEmpty(searchTerm), n => 
        n.Title.Contains(searchTerm) || n.Content.Contains(searchTerm))
    .WhereIf(tagIds.Any(), n => n.Tags.Any(t => tagIds.Contains(t.Id)))
    .WhereIf(isPinned.HasValue, n => n.IsPinned == isPinned.Value)
    .ToListAsync();
```

### Updating Entities

```csharp
// Entity update pattern
var note = await _context.Notes.FindAsync(id);
if (note == null || note.UserId != userId) return null;

note.Title = updateDto.Title;
note.Content = updateDto.Content;
note.UpdatedAt = DateTime.UtcNow;

_context.Notes.Update(note);
await _context.SaveChangesAsync();
```

### Creating Entities

```csharp
// Entity creation pattern
var newNote = new Note
{
    Title = createDto.Title,
    Content = createDto.Content,
    UserId = userId,
    CreatedAt = DateTime.UtcNow
};

_context.Notes.Add(newNote);
await _context.SaveChangesAsync();
``` 
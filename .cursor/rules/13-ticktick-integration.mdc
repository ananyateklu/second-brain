---
description: 
globs: 
alwaysApply: false
---
# TickTick Integration

This document outlines the architecture and workflow of the TickTick integration within the Second Brain application.

## Overview

The TickTick integration allows users to connect their TickTick account to Second Brain, enabling the synchronization and management of tasks directly within the application. The integration involves an OAuth 2.0 authentication flow and utilizes dedicated frontend and backend components to handle data fetching, updates, state management, and task synchronization.

## Authentication Flow (OAuth 2.0)

1.  **Initiation (Frontend)**:
    *   The connection process starts in the `SettingsPage` component ([SettingsPage.tsx](mdc:frontend/src/components/Dashboard/Settings/SettingsPage.tsx)).
    *   When the user clicks "Connect", the `handleConnectTickTick` function generates a unique `state` parameter (stored in `localStorage`), constructs the TickTick authorization URL using configuration variables (Client ID, Redirect URI, Scope), and redirects the user to TickTick.

2.  **User Authorization (TickTick)**:
    *   The user logs into TickTick (if not already logged in) and authorizes Second Brain to access their tasks.

3.  **Callback (Frontend & Backend)**:
    *   TickTick redirects the user back to the application's callback URL (`/dashboard/callback/ticktick`).
    *   The `TickTickCallback` component ([TickTickCallback.tsx](mdc:frontend/src/components/Callback/TickTickCallback.tsx)) handles this redirect.
    *   It extracts the `code` and `state` parameters from the URL.
    *   It verifies the `state` parameter against the value stored in `localStorage` to prevent CSRF attacks.
    *   If valid, it calls the backend API endpoint `/api/integrations/ticktick/exchange-code` via `integrationsService.exchangeTickTickCode` ([integrations.service.ts](mdc:frontend/src/services/api/integrations.service.ts)), sending the authorization `code`.

4.  **Code Exchange & Token Storage (Backend)**:
    *   The `IntegrationsController` ([IntegrationsController.cs](mdc:backend/SecondBrain.Api/Controllers/IntegrationsController.cs)) receives the code in the `ExchangeTickTickCode` action.
    *   It retrieves TickTick API credentials (Client ID, Secret) from configuration.
    *   It makes a POST request to the TickTick token endpoint (`https://ticktick.com/oauth/token`) with the code, client credentials, and redirect URI to exchange the code for access and refresh tokens.
    *   The response structure is defined in [TickTickTokenResponse.cs](mdc:backend/SecondBrain.Api/Models/Integrations/TickTickTokenResponse.cs). Errors are handled via [TickTickErrorResponse.cs](mdc:backend/SecondBrain.Api/Models/Integrations/TickTickErrorResponse.cs).
    *   Upon successful exchange, the `IntegrationService` ([IntegrationService.cs](mdc:backend/SecondBrain.Api/Services/IntegrationService.cs)) is called to save the tokens.
    *   The `SaveTickTickCredentialsAsync` method encrypts (TODO: Encryption not yet implemented) and stores the `access_token`, `refresh_token`, `expires_at`, `scope`, and `token_type` in the `UserIntegrationCredentials` table ([UserIntegrationCredential.cs](mdc:backend/SecondBrain.Data/Entities/UserIntegrationCredential.cs)). It updates existing credentials or creates new ones based on the `UserId` and `Provider` ("TickTick").

5.  **Confirmation (Frontend)**:
    *   The `TickTickCallback` component receives a success/failure response from the backend.
    *   On success, it sets a `localStorage` flag (`ticktick_connected`) to `true`, updates the application state (though the primary state update happens via checking the backend status), and redirects the user back to the settings page, often with a success parameter (`/dashboard/settings?integration_status=ticktick_success`).
    *   The `SettingsPage` ([SettingsPage.tsx](mdc:frontend/src/components/Dashboard/Settings/SettingsPage.tsx)) detects this parameter and updates its local connection state accordingly.

## Frontend Integration

*   **Settings Page (`SettingsPage.tsx`)**:
    *   Displays the connection status (`isTickTickConnected` state).
    *   Provides "Connect" and "Disconnect" buttons.
    *   Initiates the OAuth flow (`handleConnectTickTick`).
    *   Calls the backend to delete credentials (`handleDisconnectTickTick` -> `integrationsService.disconnectTickTick`).
    *   Checks the connection status on load and after potential callbacks using `integrationsService.getTickTickStatus`.
    *   **Sync Configuration**: Allows users to configure sync direction (two-way, to TickTick, from TickTick), conflict resolution, and tag syncing.
    *   **Sync Control**: Provides a "Sync Now" button to trigger manual synchronization and displays the last synced time. Includes a button to reset sync data (task mappings).

*   **Tasks Context (`TasksContext.tsx`, `tasksContextUtils.ts`)**:
    *   Manages the state related to TickTick integration:
        *   `tickTickTasks`: Array of tasks fetched from TickTick.
        *   `isTickTickLoading`, `tickTickError`: Loading and error states for TickTick operations.
        *   `isTickTickConnected`: Boolean flag indicating connection status (synced with localStorage and backend checks).
        *   `tickTickProjectId`: The ID of the specific TickTick project to sync (stored in localStorage).
    *   Provides functions to interact with the integration:
        *   `fetchTickTickTasks`: Fetches tasks for the selected `tickTickProjectId`.
        *   `checkTickTickStatus` / `refreshTickTickConnection`: Validates connection status with the backend.
        *   `updateTickTickProjectId`: Updates the selected project ID and triggers a task refetch.
        *   CRUD operations wrappers (`getTickTickTask`, `updateTickTickTask`, `completeTickTickTask`, `deleteTickTickTask`, `createTickTickTask`) that call the `integrationsService`.
        *   **Synchronization**: Includes `syncWithTickTick` to initiate sync, `getSyncStatus` to retrieve sync metadata, and `resetSyncData` to clear mappings. Manages `isSyncing` and `syncError` states.

*   **Integration Service (`integrations.service.ts`)**:
    *   Acts as the intermediary between frontend components/context and the backend API.
    *   Contains functions for all TickTick-related API calls:
        *   `getTickTickStatus`, `disconnectTickTick`, `exchangeTickTickCode`
        *   `getTickTickProjects`
        *   `getTickTickTasks`, `getTickTickTask`
        *   `updateTickTickTask`, `completeTickTickTask`, `deleteTickTickTask`, `createTickTickTask`
        *   **Synchronization**: `syncTickTickTasks`, `getTickTickSyncStatus`, `getTaskMappings`, `resetSyncData`.

*   **Task Components (`TasksPage.tsx`, `TaskCard.tsx`, `TaskList.tsx`, `TickTickTaskEditModal.tsx`)**:
    *   `TasksPage.tsx` uses the `TasksContext` to fetch and display both local and TickTick tasks. It includes filters for task source ('all', 'local', 'ticktick') and a `TickTickSettingsModal` for project selection.
    *   It maps TickTick tasks ([TickTickTask](mdc:frontend/src/types/integrations.ts)) to the local `Task` type ([Task](mdc:frontend/src/api/types/task.ts)) using `mapTickTickToLocalTask` before rendering.
    *   `TaskCard.tsx` renders tasks differently based on their source (`isTickTick` prop) and handles click actions, directing TickTick tasks to the `TickTickTaskEditModal`.
    *   `TickTickTaskEditModal.tsx` provides a dedicated interface for viewing and editing TickTick tasks, using context functions (`getTickTickTask`, `updateTickTickTask`, etc.) to interact with the API.

## Backend Integration

*   **Controller (`IntegrationsController.cs`)**:
    *   Defines API endpoints for TickTick integration under the `/api/integrations/ticktick/` route.
    *   Requires user authorization (`[Authorize]` attribute).
    *   Handles:
        *   `/exchange-code` (POST): Exchanges the OAuth code for tokens.
        *   `/` (DELETE): Disconnects the integration by deleting credentials.
        *   `/status` (GET): Checks if valid credentials exist for the user.
        *   `/projects` (GET): Fetches all projects from the TickTick API.
        *   `/tasks` (GET): Fetches tasks for a specific `projectId` (using `/project/{projectId}/data`) or all tasks (using `/task`).
        *   `/tasks/{projectId}/{taskId}` (GET): Fetches a single task by ID.
        *   `/tasks/{taskId}` (POST): Updates a specific task. Uses the `projectId` from the request body.
        *   `/tasks/{projectId}/{taskId}/complete` (POST): Marks a task as complete.
        *   `/tasks/{projectId}/{taskId}` (DELETE): Deletes a task.
        *   `/projects/{projectId}/tasks` (POST): Creates a new task within a specific project (calls internal helper `CreateTickTickTaskInternal`).
        *   `/sync` (POST): Initiates task synchronization between Second Brain and TickTick based on provided configuration (direction, project ID, resolution strategy). Uses internal helper methods like `PerformTwoWaySync`, `PerformToTickTickSync`, `PerformFromTickTickSync`.
        *   `/sync/status` (GET): Retrieves the last sync time and task counts (local, TickTick, mapped).
        *   `/task-mappings` (GET): Returns the list of mappings between local Task IDs and TickTick Task IDs.
        *   `/sync/reset` (POST): Deletes all task mappings for the user.
    *   **Internal Logic**: Contains helper methods for mapping (`MapLocalTaskToTickTick`, `MapTickTickTaskToLocal`, `UpdateLocalTaskFromTickTick`) and interacting with the TickTick API during sync and creation (`CreateTickTickTaskInternal`, `UpdateTickTickTaskInternal`, `DeleteTickTickTaskInternal`).

*   **Service (`IntegrationService.cs`, `IIntegrationService.cs`)**:
    *   Implements the logic for managing integration credentials.
    *   `SaveTickTickCredentialsAsync`: Saves/Updates tokens in the database. (Handles encryption - TODO).
    *   `GetTickTickCredentialsAsync`: Retrieves credentials for a user. (Handles decryption - TODO).
    *   `DeleteTickTickCredentialsAsync`: Removes credentials from the database.
    *   Uses `IHttpClientFactory` to make requests to the TickTick API.
    *   Uses `DataContext` to interact with the `UserIntegrationCredentials` entity.

*   **Data (`UserIntegrationCredential.cs`, `TaskSyncMapping.cs`, `DataContext.cs`, Migrations)**:
    *   `UserIntegrationCredential` entity stores the tokens and associated metadata.
    *   `UserId` field length was updated via migrations ([Migration files](mdc:backend/SecondBrain.Data/Migrations)) to match the `User.Id` length (`nvarchar(450)`).
    *   **`TaskSyncMapping`**: New entity to store the relationship between a local `TaskItem.Id` and a `TickTickTask.Id` for a specific user and provider ("TickTick"), including the `LastSyncedAt` timestamp.
    *   `DataContext` defines the `DbSet<UserIntegrationCredential>` and `DbSet<TaskSyncMapping>`.

## Key Functionality

*   **Connecting/Disconnecting**: Managed via `SettingsPage.tsx` and backend `IntegrationsController` actions (`/exchange-code`, `/`).
*   **Fetching Projects**: `integrationsService.getTickTickProjects` calls backend `/projects` endpoint. Used in `TickTickSettingsModal` within `TasksPage.tsx`.
*   **Fetching Tasks**: `TasksContext` calls `integrationsService.getTickTickTasks` (with `projectId`). Backend controller fetches from TickTick API using stored credentials.
*   **Viewing/Editing Task**: `TickTickTaskEditModal.tsx` uses `getTickTickTask` and `updateTickTickTask` context functions.
*   **Completing Task**: `TickTickTaskEditModal.tsx` uses `completeTickTickTask`.
*   **Deleting Task**: `TickTickTaskEditModal.tsx` uses `deleteTickTickTask`.
*   **Creating Task**: Frontend uses `createTickTickTask` in `TasksContext` -> `integrations.service.ts`, calling the backend endpoint (`/api/integrations/ticktick/projects/{projectId}/tasks`).
*   **Task Synchronization**: Managed via `SettingsPage.tsx` and `TasksContext`, calling the backend `/sync` endpoint. Handles different directions and uses the `TaskSyncMapping` table to track synced items.

## Data Mapping

*   TickTick tasks ([TickTickTask.cs](mdc:backend/SecondBrain.Api/Models/Integrations/TickTickTask.cs), [integrations.ts](mdc:frontend/src/types/integrations.ts)) are mapped to the application's internal `Task` type ([task.ts](mdc:frontend/src/api/types/task.ts)) in the frontend (`TasksPage.tsx` -> `mapTickTickToLocalTask`).
*   Mapping includes:
    *   Prefixing ID: `ticktick-${tickTickTask.id}`
    *   Priority: Numeric (TickTick) to string ('low', 'medium', 'high') using `mapTickTickPriority`.
    *   Status: Numeric (TickTick: 0=incomplete, 2=completed) to string ('Incomplete', 'Completed') using `mapTickTickStatus`.
    *   Content/Description: Handles potential differences (`content` vs `description`).
    *   Adding `source: 'ticktick'` property.
*   Backend mapping ([IntegrationsController.cs](mdc:backend/SecondBrain.Api/Controllers/IntegrationsController.cs)) translates between `TaskItem` and `TickTickTask` during synchronization (`MapLocalTaskToTickTick`, `MapTickTickTaskToLocal`, `UpdateLocalTaskFromTickTick`).

## Error Handling & Token Management

*   **Backend**: Controller actions include try-catch blocks for `HttpRequestException` and general `Exception`. Logs errors using `ILogger`. Handles unsuccessful status codes from TickTick API, attempting to parse `TickTickErrorResponse`. Sync logic includes error handling for individual task processing.
*   **Frontend**: `integrations.service.ts` includes error handling for API calls. `TasksContext` manages `tickTickError` and `syncError` states. `TickTickCallback` handles OAuth errors. `TickTickTaskEditModal` handles errors during CRUD operations. `SettingsPage` displays sync errors.
*   **Token Expiry**: The backend controller checks for token expiry (`credentials.ExpiresAt <= DateTime.UtcNow.AddMinutes(1)`) before making API calls. **Refresh token logic is still missing (marked as TODO)**. Returns 401 if token is expired, requiring manual reconnection.
*   **Connection Status**: Frontend relies on `localStorage` for initial status but validates with the backend via `getTickTickStatus`. The service includes logic to handle potential network errors during status checks to avoid flickering.

## Data Synchronization

*   The system now supports configurable task synchronization between Second Brain and TickTick for a specific, user-selected project.
*   **Directions**: Sync can be configured as 'two-way', 'to-ticktick' (local changes push to TickTick), or 'from-ticktick' (TickTick changes pull to local).
*   **Mapping**: Synchronization relies on the `TaskSyncMapping` table in the database, which links `TaskItem.Id` to `TickTickTask.Id`.
*   **Process**:
    *   Fetches local tasks and TickTick tasks (from the selected project).
    *   Retrieves existing mappings.
    *   Based on the chosen direction:
        *   Compares mapped tasks, resolves conflicts (currently based on 'newer' timestamp, other strategies planned), and updates the older task.
        *   Creates new tasks in the target system for unmapped tasks found in the source system.
        *   Handles deletions (if a mapped task is missing in one system, it's deleted in the other or the mapping is removed).
    *   Updates `LastSyncedAt` timestamp in the mappings.
*   **Initiation**: Sync is currently triggered manually from the `SettingsPage`. Automatic sync (based on frequency) is planned.
*   **Project Scope**: Synchronization is limited to one selected TickTick project at a time.

## Potential Issues & Quirks

*   **Missing Token Refresh**: Lack of automatic token refresh requires manual reconnection upon expiry.
*   **Missing Token Encryption**: Tokens are currently stored unencrypted.
*   **Project ID Requirement**: Sync and task operations require a selected `projectId`.
*   **API Rate Limits**: No explicit handling for TickTick API rate limits.
*   **Sync Complexity**: Two-way sync involves complex logic for conflict resolution and deletion handling. The 'newer' strategy relies on accurate `UpdatedAt` / `ModifiedTime` timestamps. Other resolution strategies ('ask', 'prefer source/target') are not yet implemented.
*   **Sync Performance**: Syncing large numbers of tasks could be slow.
*   **Soft Deletes**: Interaction between local soft deletes and sync logic (especially in two-way sync) needs careful handling to avoid unintended task restoration or deletion.
*   **Duplicate Tasks**: During initial sync or if mappings are reset, duplicate tasks might be created if tasks with similar content exist in both systems but weren't previously linked.

---
description: Implementation quirks, edge cases, and potential issues to be aware of when working with the codebase
globs: **/*.ts, **/*.tsx,*.ts
alwaysApply: false
---
# Dashboard Stats System

## Overview

The dashboard statistics system is a modular, extensible framework for tracking and displaying various metrics related to notes, tasks, activities, and user engagement in the Second Brain application. The system follows a registry pattern where individual stat handlers are registered for different types of metrics, allowing for easy extension and maintenance.

## Architecture

### Core Components

1. **Stats Registry (`statsRegistry.ts`)**: The central registry that maps stat IDs to their respective handler functions.
2. **Stat Handlers**: Specialized modules that calculate specific statistics (e.g., `noteStatsHandler.ts`, `taskStatsHandler.ts`).
3. **Dashboard Context**: React context system that manages the state of available and enabled stats.
4. **Utility Functions**: Helper functions for data processing, visualization, and formatting.

## Stat Handler Structure

Each stat handler:
- Receives relevant data (notes, tasks, reminders, activities)
- Processes the data to calculate metrics
- Returns a standardized `StatValue` object

## StatValue Object

The `StatValue` interface defines the standard structure for all dashboard statistics:

```typescript
interface StatValue {
  value: number | string;           // Primary value to display
  change?: number;                  // Change in value (e.g., week-over-week)
  timeframe?: string;               // Display text for the time period
  description?: string;             // Description of the statistic
  additionalInfo?: Array<{          // Optional secondary metrics
    icon?: React.ComponentType<{ className?: string }>;
    label?: string;
    value: string | number;
  }>;
  metadata?: {                      // Data for charts and visualizations
    breakdown?: {
      total: number;
      created: number;
      edited: number;
      deleted: number;
    };
    activityData?: number[];        // Time series data for charts
  };
  topBreakdown?: {                  // Optional high-level breakdown
    active: number;
    archived: number;
  };
}
```

## Available Statistics

The system provides handlers for various metric types:

1. **Note Statistics**:
   - Total Notes
   - New Notes
   - Word Count
   - Notes Overview (combined stats)

2. **Task Statistics**:
   - Active Tasks
   - Completed Tasks

3. **Connection Statistics**:
   - Total Connections
   - Connection Types

4. **Activity Statistics**:
   - Daily Activity

5. **Other**:
   - Categories
   - Ideas
   - Reminders

## Data Visualization

Chart data is generated using utility functions that process raw data into formats suitable for visualization:

- `generateDailyBreakdown`: Creates daily counts for the past 7 days
- `createProgressionForValue`: Generates artificial progression for single values
- `generateCumulativeData`: Creates cumulative time series data
- `createWordCountDistribution`: Processes word counts for visualization

## Usage

### Adding a New Stat

1. Create a handler function that processes the relevant data
2. Register the handler in `statsRegistry.ts`
3. Add the stat definition to `DEFAULT_STATS` in `dashboardContextUtils.ts`

### Customizing the Dashboard

Users can:
- Toggle stats on/off
- Resize stats (small, medium, large)
- Reorder stats
- Toggle graph visibility

## Implementation Notes

- The system uses a weekly timeframe for most change calculations
- Stats can be reset to default configuration
- Error handling prevents individual stat failures from breaking the dashboard
- Loading states are handled gracefully with placeholder values

## Extending the System

To add a new stat type:
1. Create a new handler in the appropriate file under `statsHandlers/`
2. Export the handler function
3. Import and register it in `statsRegistry.ts`
4. Add appropriate visualization support if needed

## Best Practices

- Keep stat calculations pure and focused on a single metric
- Handle edge cases (empty data, loading states)
- Maintain consistent formatting across similar stats
- Use appropriate visualizations for different data types
- Ensure performance by minimizing expensive calculations 

## Dashboard Home Structure

The dashboard home (`DashboardHome.tsx`) serves as the central landing page with several key sections:

1. **Welcome Section**: Personalized greeting with user information
2. **Quick Stats**: Customizable stats widgets in `WelcomeBar.tsx`
3. **Pinned Content**: Displays pinned notes and ideas for quick access
4. **Recent Activity**: Shows recent user actions and content updates

```tsx
// Key components of the Dashboard
- DashboardHome.tsx     // Main dashboard landing page
- WelcomeSection.tsx    // Personalized greeting
- WelcomeBar.tsx        // Stats visualization container
- StatsVisualizer.tsx   // Data visualization components
- StatsEditor.tsx       // UI for customizing dashboard stats
```

## Stats Architecture

The dashboard statistics system uses a layered architecture:

1. **Context Layer**: `DashboardContext.tsx` manages state and preferences
2. **Registry Layer**: `statsRegistry.ts` maps stat IDs to handler functions
3. **Handler Layer**: Specialized modules for calculating different statistics
4. **Visualization Layer**: `StatsVisualizer.tsx` provides visual representations
5. **Configuration Layer**: `StatsEditor.tsx` for user customization

### Stats Registry Pattern

The core of the system is the stats registry, which maps unique stat IDs to specialized handler functions:

```typescript
// Registry mapping stat IDs to their handler functions in statsRegistry.ts
const statsRegistry: Record<string, StatHandler> = {
  'connections': ({ notes }) => getConnectionsStatValue(notes),
  'connection-types': ({ notes }) => getConnectionTypesStatValue(notes),
  'categories': ({ notes, tasks, reminders }) => getCategoriesStatValue(notes, tasks, reminders),
  'daily-activity': ({ activities }) => getDailyActivityStatValue(activities),
  'total-notes': ({ notes }) => getTotalNotesStatValue(notes),
  'new-notes': ({ notes }) => getNewNotesStatValue(notes),
  'last-update': ({ notes }) => getLastUpdateStatValue(notes),
  'word-count': ({ notes }) => getWordCountStatValue(notes),
  'notes-overview': ({ notes }) => getNotesStatsValue(notes),
  'ideas': ({ ideas }) => getIdeasCountStatValue(ideas),
  'active-tasks': ({ tasks }) => getActiveTasksStatValue(tasks),
  'completed-tasks': ({ tasks }) => getCompletedTasksStatValue(tasks),
  'reminders': ({ reminders }) => getRemindersStatValue(reminders),
  'content-freshness': ({ notes }) => getContentFreshnessStatValue(notes),
  'task-completion-rate': ({ tasks }) => getTaskCompletionRateStatValue(tasks),
  'tasks-due-soon': ({ tasks }) => getTasksDueSoonStatValue(tasks),
  // Additional stats can be registered at runtime
};
```

Each stat handler is a pure function that takes application data and returns a `StatValue` object:

```typescript
// Stat handler input data
interface StatHandlerData {
  notes: Note[];
  ideas: Idea[];
  tasks: Task[];
  reminders: Reminder[];
  activities: Activity[];
  isLoading: boolean;
}

// Stat handler output format
interface StatValue {
  value: number | string;
  change?: number;               // Numeric change since previous period
  timeframe?: string;            // Time period description
  description?: string;          // Detailed explanation
  additionalInfo?: Array<{       // Optional metadata for detailed view
    icon?: React.ComponentType;
    label?: string;
    value: string | number;
  }>;
  metadata?: {                   // Extended data for visualizations
    breakdown?: {
      total: number;
      created: number;
      edited: number;
      deleted: number;
    };
    activityData?: number[];     // Time series data for charts
  };
}
```

## Dashboard Context

The `DashboardContext` provides a unified API for the dashboard stats system:

```typescript
export interface DashboardContextType {
  availableStats: DashboardStat[];                         // All available stats
  enabledStats: DashboardStat[];                           // Currently visible stats
  toggleStat: (statId: string) => void;                    // Show/hide a stat
  getStatValue: (statId: string) => StatValue;             // Get calculated value
  updateStatSize: (statId: string, size: string) => void;  // Resize a stat widget
  updateStatOrder: (statId: string, newOrder: number) => void; // Reorder stats  
  isLoading: boolean;                                      // Loading state indicator
  toggleGraphVisibility: (statId: string) => void;         // Show/hide graph for stat
  resetStats: () => Promise<boolean>;                      // Reset to defaults
}
```

The context loads and persists user preferences via the `preferencesService`:

```typescript
// Try to get dashboard stats from API
const dashboardStatsPreference = await preferencesService.getPreferenceByType('dashboard_stats');
if (dashboardStatsPreference) {
  try {
    const parsedStats = JSON.parse(dashboardStatsPreference.value);
    if (Array.isArray(parsedStats) && parsedStats.every(isDashboardStat)) {
      setStats(parsedStats);
    }
  } catch (e) {
    console.error('Failed to parse dashboard stats:', e);
  }
}
```

## Stat Card Configuration

Each stat on the dashboard is defined by a `DashboardStat` configuration:

```typescript
interface DashboardStat {
  id: string;             // Unique identifier matching a registry entry
  type: string;           // Category for grouping similar stats
  title: string;          // User-friendly display name
  icon: string;           // Icon identifier (from IconMap)
  enabled: boolean;       // Whether the stat is visible
  order: number;          // Position in the dashboard grid
  size: 'small' | 'medium' | 'large';  // Widget size
  graphVisible?: boolean; // Whether to show visualization
}
```

Default stats are defined in `dashboardContextUtils.ts`:

```typescript
export const DEFAULT_STATS: DashboardStat[] = [
  {
    id: 'total-notes-v2',
    type: 'notes',
    title: 'Total Notes',
    icon: 'Files',
    enabled: true,
    order: 0,
    size: 'medium',
    graphVisible: true
  },
  // Additional default stats...
];
```

## Data Visualization Components

The system includes a rich set of visualization components in `StatsVisualizer.tsx`:

1. **MiniLineChart**: Small trend line charts for displaying time-series data
2. **MiniBarChart**: Compact bar charts for categorical data
3. **ProgressIndicator**: Circular progress indicators for completion metrics
4. **ChangeIndicator**: Visual indicators for positive/negative changes
5. **AnimatedCounter**: Animated numeric displays for dynamic values
6. **ActivityHeatmap**: Calendar-style heat map for activity frequency
7. **ConnectionDiagram**: Network visualization for content connections

Example visualization component:

```tsx
export const MiniLineChart = ({
  data,
  height = 30,
  color = 'var(--color-accent)',
  animated = true
}: {
  data?: number[],
  height?: number,
  color?: string,
  animated?: boolean
}) => {
  // Generate a unique ID for this chart's gradient
  const gradientId = useMemo(() => `chart-gradient-${Math.random().toString(36).substring(2, 9)}`, []);
  
  // Use default data if none provided
  const chartData = data || [];
  
  // Check if we have actual data to show
  const hasData = chartData.some(value => value > 0);
  
  // Sophisticated SVG path generation with animations via Framer Motion
  // ...
};
```

## User Customization

The `StatsEditor` component provides a user interface for customizing the dashboard:

1. **Toggle Stats**: Enable/disable individual stats
2. **Resize Stats**: Change the size of stat cards (small, medium, large)
3. **Reorder Stats**: Drag and drop to rearrange stat order
4. **Toggle Visualizations**: Show/hide graphs for individual stats
5. **Reset to Defaults**: Restore all stats to their default configuration

## Welcome Bar Component

The `WelcomeBar` component serves as the container for all stat widgets:

```tsx
export function WelcomeBar({ isDashboardHome = false }: WelcomeBarProps) {
  // Get context values for stats
  const {
    enabledStats,
    toggleStat,
    getStatValue,
    updateStatSize,
    toggleGraphVisibility,
    updateStatOrder
  } = useDashboard();
  
  // Layout logic for grid-based display
  const layoutGrid = (stats: DashboardStat[]) => {
    // Grid layout algorithm that handles different sized widgets
    // ...
  };
  
  // Render each stat card with its current value and visualization
  return (
    <StyledWelcomeBarContainer>
      {/* Header with user greeting and settings button */}
      <StyledHeader>...</StyledHeader>
      
      {/* Grid layout for stats with animations */}
      <motion.div variants={staggerContainerVariants} {...}>
        <div className="grid grid-cols-8 auto-rows-[100px] gap-4 w-full">
          {displayedStats.map((stat: DashboardStat) => {
            const StatIcon = IconMap[stat.icon as keyof typeof IconMap];
            const statValue = getStatValue(stat.id);
            
            return (
              <StyledStatCard
                stat={stat}
                statValue={statValue}
                StatIcon={StatIcon}
                // Additional props...
              />
            );
          })}
        </div>
      </motion.div>
      
      {/* Stats editor UI */}
      {showStatsEditor && (
        <StatsEditor isOpen={showStatsEditor} />
      )}
    </StyledWelcomeBarContainer>
  );
}
```

## Stat Type Categories

The system supports several categories of statistics:

1. **Notes**: Stats related to notes (count, word count, freshness)
2. **Tasks**: Task completion metrics and due date analysis
3. **Ideas**: Idea count and categorization
4. **Reminders**: Upcoming reminder counts and status
5. **Connections**: Stats on relationships between content
6. **Activities**: User activity metrics and patterns
7. **Categories**: Content organization and tagging analysis

## Extending the System

To add a new stat type:

1. Create a new stat handler function in the appropriate file under `statsHandlers/`
2. Register the handler in `statsRegistry.ts`
3. Add a default configuration in `DEFAULT_STATS` if it should be enabled by default
4. Optionally add a specialized visualization in `StatsVisualizer.tsx`

```typescript
// Example of registering a new stat handler
export function registerStatHandler(statId: string, handler: StatHandler): void {
  statsRegistry[statId] = handler;
}
```

## Key Implementation Notes

1. **Performance Optimizations**: Stat calculations are memoized based on data dependencies
2. **Responsive Design**: Grid layout adapts to different screen sizes
3. **Animations**: Framer Motion powers smooth transitions and data visualizations
4. **Theming**: All visualizations respect the app's theme context
5. **Error Handling**: Robust error management prevents failed stat calculations from crashing
6. **Persistence**: User preferences are stored in the backend via API
7. **Dynamic Loading**: Stats are loaded progressively as data becomes available 
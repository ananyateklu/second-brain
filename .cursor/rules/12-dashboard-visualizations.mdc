---
description: Implementation quirks, edge cases, and potential issues to be aware of when working with the codebase
globs: **/*.ts, **/*.tsx,*.ts
alwaysApply: false
---
# Dashboard Visualizations

The Second Brain dashboard uses a sophisticated data visualization system built with SVG, Framer Motion, and custom components. These visualizations provide intuitive representations of user data and application metrics.

## Visualization Components

The core visualization components are located in `StatsVisualizer.tsx`. Each component is designed to:

1. Handle both data-rich and empty states gracefully
2. Adapt to theme changes with dynamic color variables
3. Include smooth animations for engaging user experience
4. Scale responsively based on container size

### MiniLineChart

The `MiniLineChart` component renders a compact line chart for time-series data with animation:

```tsx
export const MiniLineChart = ({
  data,
  height = 30,
  color = 'var(--color-accent)',
  animated = true
}: {
  data?: number[],
  height?: number,
  color?: string,
  animated?: boolean
}) => {
  // Generate unique gradient ID for this chart instance
  const gradientId = useMemo(() => 
    `chart-gradient-${Math.random().toString(36).substring(2, 9)}`, []);
  
  // Handle empty data state gracefully
  const hasData = (data || []).some(value => value > 0);
  if (!hasData) {
    return <EmptyStateRepresentation />;
  }
  
  // Normalize data for visualization
  const maxValue = Math.max(...(data || []), 1);
  const minValue = Math.min(...(data || []));
  const dataRange = maxValue - minValue;
  
  const normalizedData = (data || []).map(value =>
    dataRange === 0 ? 0.5 : (value - minValue) / dataRange
  );
  
  // Generate SVG path
  const width = 100;
  const effectiveHeight = height * 0.85;
  const points = normalizedData.map((value, index) =>
    `${(index / (normalizedData.length - 1)) * width}, 
     ${effectiveHeight - (value * effectiveHeight * 0.85)}`
  ).join(' L ');
  
  return (
    <svg width="100%" height="100%">
      {/* Gradient definition */}
      <defs>
        <linearGradient id={gradientId} x1="0%" y1="0%" x2="0%" y2="100%">
          <stop offset="0%" stopColor={color} stopOpacity="0.15" />
          <stop offset="100%" stopColor={color} stopOpacity="0.02" />
        </linearGradient>
      </defs>
      
      {/* Area fill under the line */}
      <motion.path
        d={`M 0,${effectiveHeight} L ${points} L ${width},${effectiveHeight} Z`}
        fill={`url(#${gradientId})`}
        initial={{ opacity: 0 }}
        animate={{ opacity: animated ? 1 : 0 }}
        transition={{ duration: 1.5, delay: 0.3 }}
      />
      
      {/* Animated line drawing */}
      <motion.path
        d={`M ${points}`}
        fill="none"
        stroke={color}
        strokeWidth={1.5}
        strokeLinecap="round"
        strokeLinejoin="round"
        initial={{ pathLength: 0, opacity: 0 }}
        animate={{ pathLength: animated ? 1 : 0, opacity: animated ? 1 : 0 }}
        transition={{ duration: 1.5, ease: "easeInOut", delay: 0.2 }}
      />
      
      {/* Endpoint dot */}
      {animated && (
        <motion.circle
          cx={width}
          cy={effectiveHeight - (normalizedData[normalizedData.length - 1] * effectiveHeight * 0.85)}
          r={2.5}
          fill={color}
          initial={{ opacity: 0, scale: 0 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 1.5, duration: 0.5 }}
        />
      )}
    </svg>
  );
};
```

### MiniBarChart

The `MiniBarChart` displays categorical data with animated bar heights:

```tsx
export const MiniBarChart = ({
  data,
  height = 30,
  color = 'var(--color-accent)',
  animated = true,
  labels = []
}: {
  data?: number[],
  height?: number,
  color?: string,
  animated?: boolean,
  labels?: string[]
}) => {
  const { theme } = useTheme();
  
  // Handle empty data
  const hasData = (data || []).some(value => value > 0);
  if (!hasData) {
    return <EmptyStateRepresentation />;
  }
  
  const maxValue = Math.max(...(data || []), 1);
  
  return (
    <div className="w-full flex flex-col h-full">
      <div className="flex items-end justify-between gap-[2px] flex-grow">
        {(data || []).map((value, index) => {
          const normalizedHeight = (value / maxValue) * (height - 12);
          
          return (
            <div key={index} className="flex flex-col items-center">
              <motion.div
                className="rounded-t-sm"
                style={{
                  backgroundColor: color,
                  width: `${100 / (data || []).length - 3}%`,
                  opacity: theme === 'dark' || theme === 'midnight' ? 0.8 : 0.7
                }}
                initial={{ height: 0 }}
                animate={{ height: `${normalizedHeight}px` }}
                transition={{
                  delay: animated ? index * 0.05 : 0,
                  duration: 0.5,
                  ease: "easeOut"
                }}
              />
            </div>
          );
        })}
      </div>
      
      {/* Optional labels below the bars */}
      {labels.length > 0 && (
        <div className="flex justify-between mt-1 pt-1 border-t text-[8px] text-[var(--color-textSecondary)]">
          {labels.map((label, i) => (
            <div key={i} className="text-center px-1 truncate">
              {label}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};
```

### ProgressIndicator

The `ProgressIndicator` shows completion metrics with circular progress display:

```tsx
export const ProgressIndicator = ({
  value = 50,
  total = 100,
  color = 'var(--color-accent)',
  animated = true
}: {
  value?: number,
  total?: number,
  color?: string,
  animated?: boolean
}) => {
  // Calculate percentage
  const percentage = Math.min(Math.max((value / total) * 100, 0), 100);
  
  // Circle parameters
  const size = 40;
  const strokeWidth = 4;
  const radius = (size - strokeWidth) / 2;
  const circumference = radius * 2 * Math.PI;
  const dash = (percentage * circumference) / 100;
  
  return (
    <div className="flex items-center justify-center h-full">
      <div className="relative">
        <svg width={size} height={size} className="transform -rotate-90">
          {/* Background circle */}
          <circle
            cx={size / 2}
            cy={size / 2}
            r={radius}
            fill="none"
            stroke="var(--color-border)"
            strokeWidth={strokeWidth}
            strokeLinecap="round"
          />
          
          {/* Animated progress arc */}
          <motion.circle
            cx={size / 2}
            cy={size / 2}
            r={radius}
            fill="none"
            stroke={color}
            strokeWidth={strokeWidth}
            strokeLinecap="round"
            initial={{ strokeDasharray: circumference, strokeDashoffset: circumference }}
            animate={{ strokeDashoffset: animated ? circumference - dash : circumference }}
            transition={{ duration: 1.5, ease: "easeInOut" }}
          />
        </svg>
        
        {/* Percentage text in center */}
        <div className="absolute inset-0 flex items-center justify-center">
          <AnimatedCounter
            value={Math.round(percentage)}
            duration={animated ? 1.5 : 0}
            className="text-xs font-medium"
          />
        </div>
      </div>
    </div>
  );
};
```

### ChangeIndicator

The `ChangeIndicator` visualizes trend directions with intuitive icons:

```tsx
export const ChangeIndicator = ({
  value = 0,
  showSparkle = false,
  hideZero = true
}: {
  value?: number,
  showSparkle?: boolean,
  hideZero?: boolean
}) => {
  // Don't show anything for zero value if hideZero is true
  if (value === 0 && hideZero) {
    return null;
  }
  
  // Determine indicator type based on value
  const isPositive = value > 0;
  const isNegative = value < 0;
  
  // Get appropriate icon and color
  const Icon = isPositive ? TrendingUp : TrendingDown;
  const colorClass = getColorClass(isPositive, isNegative);
  
  return (
    <div className={`flex items-center gap-1 ${colorClass}`}>
      <Icon className="w-3.5 h-3.5" />
      <span className="text-xs font-medium">
        {Math.abs(value)}
        {showSparkle && isPositive && (
          <motion.span
            variants={sparkleVariants}
            initial="initial"
            animate="animate"
            className="inline-flex ml-0.5"
          >
            <Sparkles className="w-3 h-3" />
          </motion.span>
        )}
      </span>
    </div>
  );
};
```

### AnimatedCounter

The `AnimatedCounter` provides animated counting for numeric values:

```tsx
export const AnimatedCounter = ({
  value = 0,
  duration = 1.5,
  className = ""
}: {
  value?: number | string,
  duration?: number,
  className?: string
}) => {
  const [displayValue, setDisplayValue] = useState(0);
  const previousValue = useRef(0);
  const startTimestamp = useRef<number | null>(null);
  const animationFrameId = useRef<number | null>(null);

  useEffect(() => {
    const numericValue = typeof value === 'string' ? parseFloat(value) : value;
    
    // Animate only if duration is set and value is numeric
    if (duration > 0 && !isNaN(numericValue)) {
      previousValue.current = displayValue;
      startTimestamp.current = null;
      
      const updateValue = (timestamp: number) => {
        if (!startTimestamp.current) {
          startTimestamp.current = timestamp;
        }
        
        const elapsed = timestamp - startTimestamp.current;
        const progress = Math.min(elapsed / (duration * 1000), 1);
        
        const currentValue = Math.round(
          previousValue.current + progress * (numericValue - previousValue.current)
        );
        
        setDisplayValue(currentValue);
        
        if (progress < 1) {
          animationFrameId.current = requestAnimationFrame(updateValue);
        }
      };
      
      animationFrameId.current = requestAnimationFrame(updateValue);
    } else {
      // Immediate update for non-animated values
      setDisplayValue(numericValue);
    }
    
    return () => {
      if (animationFrameId.current !== null) {
        cancelAnimationFrame(animationFrameId.current);
      }
    };
  }, [value, duration]);
  
  return <div className={className}>{displayValue}</div>;
};
```

### ActivityHeatmap

The `ActivityHeatmap` shows activity frequency with a calendar-style heat map:

```tsx
export const ActivityHeatmap = ({
  data,
  maxHeight = 40,
  baseColor = 'var(--color-accent)',
  animated = true
}: {
  data?: number[],
  maxHeight?: number,
  baseColor?: string,
  animated?: boolean
}) => {
  // Handle empty data
  const hasData = (data || []).some(value => value > 0);
  if (!hasData) {
    return <EmptyStateRepresentation />;
  }
  
  const maxValue = Math.max(...(data || []), 1);
  const daysToShow = Math.min((data || []).length, 30);
  
  return (
    <div className="w-full h-full">
      <div className="flex items-end justify-between h-full">
        {(data || []).slice(-daysToShow).map((value, index) => {
          const intensity = value / maxValue;
          const height = Math.max(4, intensity * maxHeight);
          
          return (
            <motion.div
              key={index}
              className="rounded-t-sm"
              style={{
                backgroundColor: getColorIntensity(value, maxValue, baseColor),
                width: `${100 / daysToShow - 3}%`,
                height: `${height}px`
              }}
              initial={{ height: 0, opacity: 0 }}
              animate={{ 
                height: `${height}px`, 
                opacity: 1 
              }}
              transition={{
                height: { 
                  delay: animated ? index * 0.02 : 0,
                  duration: 0.5
                },
                opacity: { 
                  delay: animated ? index * 0.02 : 0,
                  duration: 0.3
                }
              }}
            />
          );
        })}
      </div>
    </div>
  );
};
```

### ConnectionDiagram

The `ConnectionDiagram` renders network visualizations for content relationships:

```tsx
export const ConnectionDiagram = ({
  data = [0, 0, 0, 0],
  color = 'var(--color-accent)'
}: {
  data?: number[],
  color?: string
}) => {
  // Assign different stroke colors based on connection type
  const getTypeColor = (index: number) => {
    const colors = [
      color,
      'var(--color-success)',
      'var(--color-warning)',
      'var(--color-info)'
    ];
    return colors[index % colors.length];
  };
  
  return (
    <div className="w-full h-full flex items-center justify-center">
      <svg width="100%" height="100%" viewBox="0 0 80 60">
        {/* Central node */}
        <circle cx="40" cy="30" r="4" fill={color} />
        
        {/* Connection lines with varying thickness */}
        {data.map((value, i) => {
          if (value === 0) return null;
          
          const angle = (i * Math.PI / 2) + Math.PI / 4;
          const x2 = 40 + Math.cos(angle) * 30;
          const y2 = 30 + Math.sin(angle) * 20;
          
          return (
            <g key={i}>
              <motion.line
                x1="40"
                y1="30"
                x2={x2}
                y2={y2}
                stroke={getTypeColor(i)}
                strokeWidth={Math.min(Math.max(value / 5, 1), 3)}
                initial={{ pathLength: 0, opacity: 0 }}
                animate={{ pathLength: 1, opacity: 0.7 }}
                transition={{ duration: 1, delay: i * 0.2 }}
              />
              <circle cx={x2} cy={y2} r="3" fill={getTypeColor(i)} />
            </g>
          );
        })}
      </svg>
    </div>
  );
};
```

## Styling System

The visualization styling uses a combination of:

1. **CSS Variables**: Theme-aware colors from the theme system
2. **Tailwind Classes**: Utility classes for layout and responsive design
3. **Styled Components**: Encapsulated component styles in `WelcomeBarStyles.tsx`

### Styled Components

The `WelcomeBarStyles.tsx` file contains styled components for dashboard cards:

```tsx
// Styled container for all stat cards
export const StyledWelcomeBarContainer = styled.div`
  position: relative;
  width: 100%;
  background: var(--dashboardBarBackground);
  border-radius: 1rem;
  padding: 1.5rem;
  overflow: visible;
  backdrop-filter: blur(8px);
  box-shadow: 0 2px 20px -2px rgba(0, 0, 0, 0.12),
              0 4px 8px -2px rgba(0, 0, 0, 0.08);
  border: 0.5px solid rgba(255, 255, 255, 0.1);
  transition: all 300ms ease-in-out;
  
  @media (max-width: 768px) {
    padding: 1rem;
  }
`;

// Individual stat card with dynamic theming
export const StyledStatCard = ({ 
  stat, 
  statValue, 
  StatIcon, 
  showStatsEditor,
  showGraphs,
  onSizeChange,
  onToggleStat,
  onToggleGraphs,
  onOrderChange
}: StyledStatCardProps) => {
  const { theme } = useTheme();
  const [showOptions, setShowOptions] = useState(false);
  
  // Map stat type to visual style
  const getStatColor = () => {
    switch (stat.type) {
      case 'notes': return 'var(--color-primary)';
      case 'tasks': return 'var(--color-success)';
      case 'reminders': return 'var(--color-warning)';
      case 'connection-types': 
      case 'connections': return 'var(--color-info)';
      case 'activity': return 'var(--color-accent)';
      default: return 'var(--color-accent)';
    }
  };
  
  // Determine what visualization to show
  const renderVisualization = () => {
    if (!showGraphs) return null;
    
    const color = getStatColor();
    
    switch (stat.type) {
      case 'notes':
      case 'tasks':
      case 'reminders':
      case 'ideas':
        return statValue.metadata?.activityData ? (
          <MiniLineChart 
            data={statValue.metadata.activityData} 
            color={color} 
          />
        ) : null;
        
      case 'activity':
        return statValue.metadata?.activityData ? (
          <ActivityHeatmap 
            data={statValue.metadata.activityData} 
            baseColor={color}
          />
        ) : null;
        
      case 'connection-types':
        return statValue.metadata?.breakdown ? (
          <ConnectionDiagram 
            data={[
              statValue.metadata.breakdown.created,
              statValue.metadata.breakdown.edited,
              statValue.metadata.breakdown.deleted,
              statValue.metadata.breakdown.total
            ]} 
            color={color}
          />
        ) : null;
        
      case 'categories':
        return (
          <MiniBarChart 
            data={statValue.additionalInfo?.map(info => Number(info.value)) || []} 
            labels={statValue.additionalInfo?.map(info => String(info.label)) || []}
            color={color}
          />
        );
        
      default:
        return null;
    }
  };
  
  return (
    <motion.div
      className={`
        relative rounded-xl overflow-hidden
        bg-white/5 dark:bg-black/5
        backdrop-blur-md
        border border-white/10 dark:border-white/5
        shadow-md
        h-full w-full
        transition-all duration-300
        ${showStatsEditor ? 'opacity-80 hover:opacity-100' : 'opacity-100'}
      `}
      variants={cardVariants}
      whileHover={{ 
        scale: showStatsEditor ? 1.02 : 1, 
        boxShadow: showStatsEditor ? '0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)' : '' 
      }}
      transition={{ duration: 0.3 }}
    >
      {/* Card content */}
      <div className="flex flex-col h-full">
        {/* Header */}
        <div className="flex justify-between items-start p-3 pb-1">
          <div className="flex items-center gap-2">
            <div 
              className="p-1.5 rounded-lg" 
              style={{ 
                backgroundColor: `${getStatColor()}20`,
                color: getStatColor()
              }}
            >
              <StatIcon className="w-4 h-4" />
            </div>
            <h3 className="text-sm font-medium text-[var(--color-text)]">
              {stat.title}
            </h3>
          </div>
          
          {/* Stat value */}
          <div className="flex items-center gap-1">
            <div className="text-lg font-semibold text-[var(--color-text)]">
              {typeof statValue.value === 'number' ? (
                <AnimatedCounter value={statValue.value} />
              ) : (
                statValue.value
              )}
            </div>
            {statValue.change !== undefined && (
              <ChangeIndicator value={statValue.change} />
            )}
          </div>
        </div>
        
        {/* Description */}
        {statValue.timeframe && (
          <div className="px-3 text-xs text-[var(--color-textSecondary)]">
            {statValue.timeframe}
          </div>
        )}
        
        {/* Visualization */}
        <div className="flex-grow px-3 pt-1 pb-3">
          {renderVisualization()}
        </div>
      </div>
      
      {/* Editor overlay when editing */}
      {showStatsEditor && (
        <div className="absolute inset-0 bg-black/10 dark:bg-black/30 backdrop-blur-sm opacity-0 hover:opacity-100 transition-opacity duration-300">
          {/* Editing controls */}
        </div>
      )}
    </motion.div>
  );
};
```

## Animation System

Animations are powered by Framer Motion with custom variants and transitions:

```typescript
// Card appearance animation
export const cardVariants = {
  hidden: { opacity: 0, scale: 0.9, y: 20 },
  visible: { 
    opacity: 1, 
    scale: 1, 
    y: 0,
    transition: { 
      type: 'spring',
      stiffness: 260,
      damping: 20 
    } 
  },
  exit: { 
    opacity: 0,
    scale: 0.95,
    transition: { 
      duration: 0.2,
      ease: "easeOut" 
    }
  }
};

// Container for staggered animations
export const staggerContainerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.07,
      delayChildren: 0.1
    }
  },
  exit: {
    opacity: 0,
    transition: {
      staggerChildren: 0.05,
      staggerDirection: -1
    }
  }
};

// Sparkle animation for positive changes
export const sparkleVariants = {
  initial: { scale: 0, rotate: -30, opacity: 0 },
  animate: {
    scale: [0, 1.2, 1],
    rotate: [-30, 0, 0],
    opacity: [0, 1, 1],
    transition: {
      duration: 0.6,
      ease: "easeOut",
      times: [0, 0.6, 1]
    }
  }
};

// Pulsing animation for attention
export const pulseAnimation = {
  scale: [1, 1.05, 1],
  opacity: [0.8, 1, 0.8],
  transition: {
    duration: 2,
    ease: "easeInOut",
    times: [0, 0.5, 1],
    repeat: Infinity,
    repeatDelay: 0.5
  }
};
```

## Theme Integration

All visualizations adapt to the current theme through CSS variables:

```typescript
// Color utility for calculating intensity based on value
export const getColorIntensity = (
  value: number, 
  maxValue: number,
  baseColor = 'var(--color-accent)'
) => {
  const intensity = value / maxValue;
  
  if (intensity === 0) {
    return 'var(--color-border)';
  }
  
  // Different intensity levels
  if (intensity <= 0.25) {
    return `${baseColor}30`;
  } else if (intensity <= 0.5) {
    return `${baseColor}60`;
  } else if (intensity <= 0.75) {
    return `${baseColor}90`;
  } else {
    return baseColor;
  }
};
```

## Responsive Design

Visualizations adapt to different screen sizes and stat card dimensions:

```typescript
// Determine width based on stat size
const getWidthFromSize = (size?: string) => {
  switch (size) {
    case 'small': return 1;
    case 'medium': return 2;
    case 'large': return 4;
    default: return 1;
  }
};

// Layout grid function optimizes placement of different sized components
const layoutGrid = (stats: DashboardStat[]) => {
  const sortedStats = [...stats].sort((a, b) => a.order - b.order);
  const grid: (DashboardStat | null)[][] = [[]];
  let currentRow = 0;
  let currentCol = 0;

  sortedStats.forEach(stat => {
    const width = getWidthFromSize(stat.size);
    if (currentCol + width > 8) {
      currentRow++;
      currentCol = 0;
      grid[currentRow] = [];
    }
    for (let i = 0; i < width; i++) {
      grid[currentRow][currentCol + i] = i === 0 ? { ...stat, colSpan: width } : null;
    }
    currentCol += width;
  });

  return grid.flat().filter(Boolean) as DashboardStat[];
};
```

## Empty States

All visualizations handle empty data states with minimalist representations:

```tsx
// Empty state representation for visualizations
const EmptyStateRepresentation = () => (
  <div className="w-full flex items-center justify-center h-full opacity-30">
    <div className="h-[1px] w-3/4 bg-gray-300 dark:bg-gray-700"></div>
  </div>
);
```

## Implementing New Visualizations

To add a new visualization type:

1. Create the component in `StatsVisualizer.tsx`
2. Add appropriate handling in the `renderVisualization` function
3. Add any necessary utility functions for data processing
4. Update the theme integration for consistent styling

## Key Implementation Notes

1. **Performance**: SVG animations are optimized for smooth rendering
2. **Accessibility**: Visualizations include appropriate ARIA attributes
3. **Theme Awareness**: All colors use CSS variables for theme consistency 
4. **Empty States**: All components handle missing or empty data gracefully
5. **Animation Logic**: Complex animations are separated into reusable utilities
6. **Responsive Design**: Visualizations adapt to different card sizes and screen widths

## Visualization Types

The dashboard supports several visualization types:

1. **Sparklines**: Simple line graphs showing trends over time
2. **Bar Charts**: Visualizing comparative data
3. **Progress Indicators**: Showing completion rates or progress
4. **Animated Counters**: For numeric values with transitions
5. **Distribution Charts**: For showing data distribution patterns

## Animation Systems

The dashboard employs sophisticated animations via the Framer Motion library:

```typescript
// Examples from welcomeBarUtils.ts
export const cardVariants = {
  hidden: {
    opacity: 0,
    y: 20,
    scale: 0.8,
    rotateX: 10
  },
  visible: {
    opacity: 1,
    y: 0,
    scale: 1,
    rotateX: 0,
    transition: {
      type: "spring",
      stiffness: 200,
      damping: 20,
      mass: 0.8,
      delay: 0.1
    }
  },
  // ...more variants
};
```

Animations include:
- Entrance/exit animations
- Hover effects
- Value change highlights
- Staggered animations for lists
- Pulse animations for updates

## Chart Data Processing

Raw data is processed into visualization-friendly formats:

1. **Time Series Data**:
   - `generateDailyBreakdown`: Creates data points for daily activity
   - `generateCumulativeData`: Creates cumulative growth charts

2. **Distribution Data**:
   - `createWordCountDistribution`: Formats word counts for visualization
   - `createProgressionForValue`: Creates artificial progression for single values

3. **Analysis Utilities**:
   - `isDataFlat`: Detects if data has little variation
   - `isDataBackLoaded`: Detects if data is concentrated at the end

## Responsive Design

The visualization system adapts to different card sizes:

```typescript
export const sizeClasses = {
  small: {
    padding: 'p-3',
    height: 'h-[100px]',
    iconSize: 'w-3.5 h-3.5',
    titleSize: 'text-xs',
    valueSize: 'text-sm font-semibold',
    chartHeight: 'h-8'
  },
  // medium and large sizes...
};
```

This allows charts to render appropriately in different card contexts.

## Theme Integration

Visualizations are theme-aware and integrate with the app's theming system:

```typescript
export const getIconColor = (type: string) => {
  const baseClass = 'transition-colors duration-200';

  switch (type) {
    case 'notes':
      return `${baseClass} text-blue-600 dark:text-blue-400 midnight:text-blue-400`;
    // other types...
  }
};
```

This ensures consistent styling across light, dark, and custom themes.

## Layout and Sizing

The dashboard uses a responsive grid layout with cards that can be:
- Small (1x1 unit)
- Medium (2x1 units)
- Large (2x2 units or full width)

## Interaction States

Visualizations support various interaction states:
- Hover effects
- Focus states 
- Loading states
- Empty states
- Error states

## Accessibility

Visualization components implement accessibility features:
- Color contrast compliance
- Screen reader descriptions
- Keyboard navigation
- Appropriate ARIA attributes

## Best Practices

When extending or modifying visualizations:

1. **Data Consistency**:
   - Ensure charts handle all data edge cases
   - Provide appropriate fallbacks for missing data
   - Maintain consistent scales within related stats

2. **Visual Clarity**:
   - Use appropriate chart types for the data
   - Avoid visual clutter
   - Ensure readable text and values
   - Maintain a balanced color palette

3. **Performance**:
   - Optimize render performance
   - Use appropriate animation throttling
   - Handle large datasets efficiently 